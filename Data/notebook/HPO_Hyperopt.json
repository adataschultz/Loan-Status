{
	"name": "HPO_Hyperopt",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c8548de3-86c0-4d44-a233-8f5d5dd9ef73"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "xTlApJHhcaXl"
				},
				"source": [
					"# Lending Tree Loan Status - Hyperopt"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "YVZSGOovcSYV"
				},
				"source": [
					"# Set Up Environment for Spark"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "InYtmHYylxH3"
				},
				"source": [
					"## Colab"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "a14ZKnvXEBZC",
					"outputId": "c7a4e558-86ae-4569-a644-5a8e402ab120"
				},
				"source": [
					"from google.colab import drive \n",
					"drive.mount('/content/drive')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "QULkYKkN47wi",
					"outputId": "343779f9-12c4-44ac-a321-ef73e2d7b8fe"
				},
				"source": [
					"%cd /content/drive/MyDrive/Spark/"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "exlpzAH447wk"
				},
				"source": [
					"# Set up environment for Spark\n",
					"!apt-get install openjdk-8-jdk-headless -qq > /dev/null"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "4zLWwjEBC7U-"
				},
				"source": [
					"!wget -q https://archive.apache.org/dist/spark/spark-3.3.0/spark-3.3.0-bin-hadoop3.tgz"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "geNj6zEHC7U_"
				},
				"source": [
					"!tar xf spark-3.3.0-bin-hadoop3.tgz"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "zCte75iGC7VA"
				},
				"source": [
					"# Set your spark folder to your system path environment. \n",
					"import os\n",
					"os.environ['JAVA_HOME'] = '/usr/lib/jvm/java-8-openjdk-amd64'\n",
					"os.environ['SPARK_HOME'] = '/content/drive/MyDrive/Spark/spark-3.3.0-bin-hadoop3'"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "b21uG-qPC7VB",
					"outputId": "cbb1ded5-e460-47e7-8898-a08916efe401"
				},
				"source": [
					"# Install findspark using pip\n",
					"!pip install -q findspark\n",
					"!pip install -U pyspark==3.3\n",
					"import findspark\n",
					"findspark.init()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/",
						"height": 221
					},
					"id": "P6ThRw2vC7VB",
					"outputId": "a8a111d3-9385-4661-cae3-7e63fe9b4b75"
				},
				"source": [
					"# Pyspark Session for Colab\n",
					"from pyspark.sql import SparkSession\n",
					"spark = SparkSession.builder\\\n",
					"        .master('local')\\\n",
					"        .appName('Colab')\\\n",
					"        .config('spark.driver.memory', '24g')\\\n",
					"        .config('spark.executor.pyspark.memory', '18g')\\\n",
					"        .config('spark.executor.cores', '4')\\\n",
					"        .config('spark.python.worker.memory', '18g')\\\n",
					"        .config('spark.sql.execution.arrow.pyspark.enabled', 'True')\\\n",
					"        .config('spark.sql.debug.maxToStringFields', '1000')\\\n",
					"        .config('spark.sql.autoBroadcastJoinThreshold', '-1')\\\n",
					"        .config('spark.ui.port', '4050')\\\n",
					"        .getOrCreate()\n",
					"\n",
					"spark"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "_boXodIwl5RP"
				},
				"source": [
					"## Paperspace Gradient"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "WuzH3OO59L4u"
				},
				"source": [
					"# Install Java JRE/JDK in terminal\n",
					"apt update\n",
					"apt install default-jre\n",
					"apt install default-jdk"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"execution": {
						"iopub.execute_input": "2022-09-14T22:41:18.558493Z",
						"iopub.status.busy": "2022-09-14T22:41:18.558381Z",
						"iopub.status.idle": "2022-09-14T22:41:22.106403Z",
						"shell.execute_reply": "2022-09-14T22:41:22.105914Z",
						"shell.execute_reply.started": "2022-09-14T22:41:18.558479Z"
					},
					"id": "xFQyTPoYa4rA",
					"outputId": "40e819c9-30f5-49c7-9e52-f87d5d18c556"
				},
				"source": [
					"# Install findspark using pip\n",
					"!pip install -q findspark\n",
					"!pip install -U pyspark==3.3\n",
					"import findspark\n",
					"findspark.init()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/",
						"height": 222
					},
					"execution": {
						"iopub.execute_input": "2022-09-16T15:32:46.334025Z",
						"iopub.status.busy": "2022-09-16T15:32:46.332716Z",
						"iopub.status.idle": "2022-09-16T15:32:49.696446Z",
						"shell.execute_reply": "2022-09-16T15:32:49.69584Z",
						"shell.execute_reply.started": "2022-09-16T15:32:46.334Z"
					},
					"id": "8USbkr7vPGBq",
					"outputId": "093e13e5-fcaf-4ffd-c800-0755878cc969"
				},
				"source": [
					"# Pyspark Session for Paperspace with more RAM & CPU cores available\n",
					"# driver.memory=35g & executor.pyspark.memory=28 for some\n",
					"from pyspark.sql import SparkSession\n",
					"spark = SparkSession.builder\\\n",
					"        .master('local')\\\n",
					"        .appName('Paperspace')\\\n",
					"        .config('spark.driver.memory', '38g')\\\n",
					"        .config('spark.executor.pyspark.memory', '32g')\\\n",
					"        .config('spark.executor.cores', '4')\\\n",
					"        .config('spark.python.worker.memory', '32g')\\\n",
					"        .config('spark.sql.execution.arrow.pyspark.enabled', 'True')\\\n",
					"        .config('spark.sql.debug.maxToStringFields', '1000')\\\n",
					"        .config('spark.sql.autoBroadcastJoinThreshold', '-1')\\\n",
					"        .config('spark.ui.port', '4050')\\\n",
					"        .getOrCreate()\n",
					"\n",
					"spark"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "nPNvh9p5JPvU"
				},
				"source": [
					"# Remove warnings\n",
					"spark.sparkContext.setLogLevel('ERROR')"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "rAob_K7hIqhl"
				},
				"source": [
					"# Install & Import Packages and Set Seed"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "mzEE-fcNYc5r",
					"outputId": "3d6812fb-66f9-4f6a-83ea-cf4b81d3f4ce",
					"scrolled": true,
					"tags": []
				},
				"source": [
					"#!pip install --upgrade mlflow \n",
					"!pip install git+https://github.com/mlflow/mlflow@master\n",
					"!pip install hyperopt\n",
					"import random\n",
					"import warnings\n",
					"import numpy as np\n",
					"from pyspark.sql.functions import col, round\n",
					"from pyspark.sql.types import IntegerType, FloatType\n",
					"from pyspark.ml.feature import VectorAssembler, MinMaxScaler, StandardScaler\n",
					"from pyspark.ml import Pipeline\n",
					"from pyspark.ml.classification import LogisticRegression, LinearSVC\n",
					"from pyspark.ml.classification import DecisionTreeClassifier\n",
					"from pyspark.ml.classification import RandomForestClassifier, GBTClassifier\n",
					"from pyspark.ml.tuning import ParamGridBuilder, CrossValidator\n",
					"from pyspark.ml.evaluation import BinaryClassificationEvaluator\n",
					"from pyspark.ml.evaluation import MulticlassClassificationEvaluator\n",
					"from pyspark.mllib.evaluation import BinaryClassificationMetrics\n",
					"from hyperopt import fmin, tpe, hp, Trials, STATUS_OK\n",
					"from hyperopt.pyll import scope\n",
					"import time\n",
					"from datetime import datetime, timedelta\n",
					"from timeit import default_timer as timer\n",
					"try:\n",
					"  import mlflow.pyspark.ml\n",
					"  mlflow.pyspark.ml.autolog()\n",
					"except:\n",
					"  print(f'Your version of MLflow ({mlflow.__version__}) does not support pyspark.ml for autologging. To use autologging, upgrade your MLflow client version or use Databricks Runtime for ML 8.3 or above.')\n",
					"warnings.filterwarnings('ignore')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "zxq23AoWjaF5"
				},
				"source": [
					"# Set seed \n",
					"seed_value = 42\n",
					"os.environ['SparkML_HPO'] = str(seed_value)\n",
					"random.seed(seed_value)\n",
					"np.random.seed(seed_value)"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "K9hRqDg6HbAJ"
				},
				"source": [
					"# Upsampling"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "HJm9o95vZN7z"
				},
				"source": [
					"## Read Data and View Schema"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "8vqi0lRLrNED",
					"outputId": "5d8e9a52-b74d-46e5-f7dc-0098837d03b5",
					"scrolled": true,
					"tags": []
				},
				"source": [
					"trainDF = spark.read.csv('/content/drive/MyDrive/LoanStatus/Data/trainDF_US.csv',\n",
					"                         header=True, inferSchema=True).cache()\n",
					"print('\\nTrain Schema')\n",
					"trainDF.printSchema()\n",
					"\n",
					"testDF = spark.read.csv('/content/drive/MyDrive/LoanStatus/Data/testDF_US.csv',\n",
					"                        header=True, inferSchema=True).cache()\n",
					"print('\\nTest Schema')\n",
					"testDF.printSchema()"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "fJ1M81j4wKQK"
				},
				"source": [
					"## Set up Vector Assembler, Scalers and Evaluators"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "FzDida3DyXTP"
				},
				"source": [
					"# Define features and label for train data\n",
					"features = trainDF.columns[0: len(trainDF.columns) - 1]\n",
					"trainDF = trainDF.select(col('loan_status').alias('label'), *features)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "gPBpDfkMLs42"
				},
				"source": [
					"# VectorAssembler \n",
					"vecAssembler = VectorAssembler(inputCols=features, \n",
					"                               outputCol='unscaledFeatures', \n",
					"                               handleInvalid='skip')  \n",
					"\n",
					"# Transform train data\n",
					"trainDF = vecAssembler.transform(trainDF) "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "si0_MeM4Ls45"
				},
				"source": [
					"# Define features and label for test data \n",
					"features = testDF.columns[0: len(testDF.columns) - 1]\n",
					"testDF = testDF.select(col('loan_status').alias('label'), *features)\n",
					"\n",
					"# Transform test data\n",
					"testDF = vecAssembler.transform(testDF)  "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "cwGtrsjnZv6Q"
				},
				"source": [
					"# MinMaxScaler\n",
					"mmScaler = MinMaxScaler(inputCol='unscaledFeatures', \n",
					"                        outputCol='scaledFeatures',\n",
					"                        min=0, max=1)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "xpK8zONSclHy"
				},
				"source": [
					"# Standard Scaler\n",
					"stdScaler = StandardScaler(inputCol='unscaledFeatures', \n",
					"                           outputCol='scaledFeatures', \n",
					"                           withStd=True, \n",
					"                           withMean=False)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "W_HRn7cGE5B0"
				},
				"source": [
					"# Define model evaluation methods\n",
					"evaluator_auroc = BinaryClassificationEvaluator(labelCol='label', \n",
					"                                                metricName='areaUnderROC')\n",
					"\n",
					"evaluator_f1 = MulticlassClassificationEvaluator(labelCol='label', \n",
					"                                                 metricName='f1')\n",
					"\n",
					"evaluator_acc = MulticlassClassificationEvaluator(labelCol='label', \n",
					"                                                  metricName='accuracy')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "w5tF2BQPdgzf",
					"outputId": "aadc757b-b242-43d1-ea60-082936274594"
				},
				"source": [
					"# Change directory to write mlruns\n",
					"%cd /content/drive/MyDrive/LoanStatus/Python/Models/ML/SparkML/Models/Hyperopt/"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "l8N5BHocNsZ8"
				},
				"source": [
					"## Logistic Regression\n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "e1fw4fyOwY8x"
				},
				"source": [
					"### AUROC Score "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "K1wFVzid-5KN"
				},
				"source": [
					"#### 100 Trials"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "UED8pUDB_IHf"
				},
				"source": [
					"def train_model(regParam, elasticNetParam): \n",
					"  \n",
					"  \"\"\"\n",
					"   - Input: Hyperparameters for tuning\n",
					"   - Return: AUROC score on the validation set\n",
					"  \"\"\"\n",
					" \n",
					"  # Use MLflow to track with 'nested=True' logged as a child run \n",
					"  with mlflow.start_run(nested=True):\n",
					"\n",
					"    # MinMaxScaler\n",
					"    mmScaler = MinMaxScaler(inputCol='unscaledFeatures', \n",
					"                            outputCol='scaledFeatures',\n",
					"                            min=0, max=1)\n",
					"    \n",
					"    # Define model\n",
					"    lr = LogisticRegression(labelCol='label', \n",
					"                            featuresCol='scaledFeatures',\n",
					"                            family='binomial',                             \n",
					"                            regParam=regParam,\n",
					"                            elasticNetParam=elasticNetParam,\n",
					"                            standardization=True)\n",
					"    \n",
					"    print('\\nTrial Parameters:')\n",
					"    print('regParam:', lr.getRegParam())\n",
					"    print('ElasticNet:', lr.getElasticNetParam())\n",
					"    print('maxIter:', lr.getMaxIter())\n",
					"\n",
					"    # Create pipeline\n",
					"    pipeline_lr_hpo = Pipeline(stages=[mmScaler, lr])\n",
					"    \n",
					"    # Define an evaluation metric\n",
					"    evaluator_auroc = BinaryClassificationEvaluator(labelCol='label', \n",
					"                                                    metricName='areaUnderROC')\n",
					"\n",
					"    # Fit model\n",
					"    model = pipeline_lr_hpo.fit(trainDF)   \n",
					"    \n",
					"    # Evaluate the model on the validation dataset\n",
					"    predictions = model.transform(testDF)\n",
					"    validation_metric = evaluator_auroc.evaluate(predictions)\n",
					"\n",
					"    mlflow.log_metric('val_AUROC_score', validation_metric)\n",
					" \n",
					"  return model, validation_metric"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "D1njZhXp_IHj",
					"outputId": "c7c10c53-1e45-4a96-e483-537cc592d610"
				},
				"source": [
					"# Run initial model\n",
					"initial_model, val_metric = train_model(regParam=0.0, elasticNetParam=0.0)\n",
					"print(f'The trained logistic regression achieved an AUROC score of {val_metric} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "2fv6CqSr_IHn"
				},
				"source": [
					"def train_with_hyperopt(params):\n",
					"\n",
					"  \"\"\"\n",
					"  Train method where hyperparameters are passed to hyperopt.fmin()\n",
					"  - Input: Hyperparameters (params) in dictionary\n",
					"  - Return: Dictionary with 'loss' and 'status' (success/failure of run)\n",
					"  \"\"\"\n",
					"\n",
					"  # Convert integer params to int type if searching over continuous values\n",
					"  regParam = params['regParam']\n",
					"  elasticNetParam = params['elasticNetParam']\n",
					"\n",
					"  # Train model\n",
					"  model, f1_score = train_model(regParam, elasticNetParam)\n",
					"\n",
					"  # Return a loss to monitor\n",
					"  loss = 1 - f1_score\n",
					"  print('Trial loss:', loss)\n",
					"  \n",
					"  return {'loss': loss, 'status': STATUS_OK}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "GDPndR-M_IHp"
				},
				"source": [
					"# Define parameter space for HPO\n",
					"space = {\n",
					"  'regParam': hp.quniform('regParam',  0, 1, q=0.01),\n",
					"  'elasticNetParam': hp.quniform('elasticNetParam', 0, 1, q=0.01),\n",
					"}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "PAKTuXH5wLkR",
					"outputId": "c50fff42-aef4-4d6e-abe6-49787e27f26e",
					"scrolled": true,
					"tags": []
				},
				"source": [
					"# Run HPO\n",
					"algo=tpe.suggest\n",
					"\n",
					"with mlflow.start_run():\n",
					"    \n",
					"  best_params = fmin( \n",
					"      fn=train_with_hyperopt,\n",
					"      space=space,\n",
					"      algo=tpe.suggest,\n",
					"      max_evals=100\n",
					"  )"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "r-WPlCbQwLkU",
					"outputId": "455bed21-038b-4c7f-e5de-653882aba720"
				},
				"source": [
					"# Print best params\n",
					"best_params"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "OITxQiKEwLkW"
				},
				"source": [
					"# Define vars to fit best params\n",
					"best_elasticNetParam = best_params['elasticNetParam']\n",
					"best_regParam = best_params['regParam']"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "bX_7p-VAwLkZ",
					"outputId": "5360026b-88fb-4c60-a907-403b1ffc4ca9"
				},
				"source": [
					"# Fit model with best params\n",
					"final_model, val_AUROC_score = train_model(best_elasticNetParam, best_regParam) \n",
					"print(f'The trained logistic regression achieved an AUROC score of {val_AUROC_score} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "DrTAtoPNy9_y",
					"outputId": "6ab0500c-d20b-464e-a074-22497ed7da09"
				},
				"source": [
					"# Evaluate AUROC on initial and tuned model\n",
					"initial_model_test_metric = evaluator_auroc.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_auroc.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved AUROC score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "6HhRRXAVwLka",
					"outputId": "3d7efcb8-fa50-4afd-e08f-84a02ba957f4"
				},
				"source": [
					"# Evaluate F1 score on initial and tuned model\n",
					"initial_model_test_metric = evaluator_f1.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_f1.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved F1 score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "YoYrht-O_IH6",
					"outputId": "4ea0a18c-b896-418e-903c-7ab2b0a5f051"
				},
				"source": [
					"# Set up logistic regression pipeline\n",
					"lr = LogisticRegression(labelCol='label', \n",
					"                        featuresCol='scaledFeatures', \n",
					"                        family='binomial', \n",
					"                        maxIter=100, \n",
					"                        regParam=0.0, \n",
					"                        elasticNetParam=0.0)\n",
					"\n",
					"pipeline_lr = Pipeline(stages=[mmScaler, lr])\n",
					"search_time_start = time.time()\n",
					"pipelineModel_lr_hyperopt = pipeline_lr.fit(trainDF)\n",
					"print('Time to fit best model:', time.time() - search_time_start)\n",
					"pipelineModel_lr_hyperopt.save('/content/drive/MyDrive/LoanStatus/Python/Models/ML/SparkML/Models/Hyperopt/pipelineModel_lr_hyperopt_us_auroc_100trials')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "S30AvH7clUO-",
					"outputId": "282465a4-4443-4f9b-a7e9-534189944da9"
				},
				"source": [
					"# Predict and find AUROC, test error and accuracy\n",
					"prediction_lr = pipelineModel_lr_hyperopt.transform(testDF) \n",
					"\n",
					"lr_auroc = evaluator_auroc.evaluate(prediction_lr)\n",
					"print('Hyperopt: Logistic Regression')\n",
					"print('Area under ROC curve: %g' % (lr_auroc))\n",
					"print('Test Error: %g ' % (1.0 - lr_auroc))\n",
					"print('Accuracy:', evaluator_acc.evaluate(prediction_lr)) "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "zmEnO6BCNzZJ"
				},
				"source": [
					"### F1 Score "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "AKTR5-xDwJE9"
				},
				"source": [
					"#### 100 Trials"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "hne8EcQp20WY"
				},
				"source": [
					"def train_model(regParam, elasticNetParam): \n",
					"  \n",
					"  \"\"\"\n",
					"   - Input: Hyperparameters for tuning\n",
					"   - Return: F1 score on the validation set\n",
					"  \"\"\"\n",
					"\n",
					"  # Use MLflow to track with 'nested=True' logged as a child run \n",
					"  with mlflow.start_run(nested=True):\n",
					"\n",
					"    # MinMaxScaler\n",
					"    mmScaler = MinMaxScaler(inputCol='unscaledFeatures', \n",
					"                            outputCol='scaledFeatures',\n",
					"                            min=0, max=1)\n",
					"    \n",
					"    # Define model\n",
					"    lr = LogisticRegression(labelCol='label', \n",
					"                            featuresCol='scaledFeatures',\n",
					"                            family='binomial',                             \n",
					"                            regParam=regParam,\n",
					"                            elasticNetParam=elasticNetParam,\n",
					"                            standardization=True)\n",
					"    \n",
					"    print('\\nTrial Parameters:')\n",
					"    print('regParam:', lr.getRegParam())\n",
					"    print('ElasticNet:', lr.getElasticNetParam())\n",
					"    print('maxIter:', lr.getMaxIter())\n",
					"\n",
					"    # Create pipeline\n",
					"    pipeline_lr_hpo = Pipeline(stages=[mmScaler, lr])\n",
					"    \n",
					"    # Define an evaluation metric\n",
					"    evaluator_f1 = MulticlassClassificationEvaluator(labelCol='label', \n",
					"                                                     metricName='f1')\n",
					"\n",
					"    # Fit model\n",
					"    model = pipeline_lr_hpo.fit(trainDF)   \n",
					"    \n",
					"    # Evaluate the model on the validation dataset\n",
					"    predictions = model.transform(testDF)\n",
					"    validation_metric = evaluator_f1.evaluate(predictions)\n",
					"\n",
					"    mlflow.log_metric('val_f1_score', validation_metric)\n",
					" \n",
					"  return model, validation_metric"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "vVy3SaWq20Wc",
					"outputId": "85e6eace-1c70-41f2-ed29-737913c6671e"
				},
				"source": [
					"# Run initial model\n",
					"initial_model, val_metric = train_model(regParam=0.0, elasticNetParam=0.0)\n",
					"print(f'The trained logistic regression achieved an F1 score of {val_metric} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "3iA5z6-B20Wd"
				},
				"source": [
					"def train_with_hyperopt(params):\n",
					"\n",
					"  \"\"\"\n",
					"  Train method where hyperparameters are passed to hyperopt.fmin()\n",
					"  - Input: Hyperparameters (params) in dictionary\n",
					"  - Return: Dictionary with 'loss' and 'status' (success/failure of run)\n",
					"  \"\"\"\n",
					"\n",
					"  # Convert integer params to int type if searching over continuous values\n",
					"  regParam = params['regParam']\n",
					"  elasticNetParam = params['elasticNetParam']\n",
					"\n",
					"  # Train model\n",
					"  model, f1_score = train_model(regParam, elasticNetParam)\n",
					"\n",
					"  # Return a loss to monitor\n",
					"  loss = 1 - f1_score\n",
					"  print('Trial loss:', loss)\n",
					"  \n",
					"  return {'loss': loss, 'status': STATUS_OK}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "7WP05rPo20We"
				},
				"source": [
					"# Define parameter space for HPO\n",
					"space = {\n",
					"  'regParam': hp.quniform('regParam', 0, 1, q=0.01),\n",
					"  'elasticNetParam': hp.quniform('elasticNetParam', 0, 1, q=0.01),\n",
					"}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "lVSyRoBO20Wg",
					"outputId": "1c27a3d9-3057-4599-c901-0e1b8b953d01",
					"scrolled": true,
					"tags": []
				},
				"source": [
					"# Run HPO\n",
					"algo=tpe.suggest\n",
					"\n",
					"with mlflow.start_run():\n",
					"    \n",
					"  best_params = fmin( \n",
					"      fn=train_with_hyperopt,\n",
					"      space=space,\n",
					"      algo=tpe.suggest,\n",
					"      max_evals=100\n",
					"  )"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "dnkfWyzp20Wh",
					"outputId": "8ce347c9-ae4a-46c0-cb83-a7320bf0bd23"
				},
				"source": [
					"# Print best params\n",
					"best_params"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "R6Cw_zAl20Wi"
				},
				"source": [
					"# Define vars to fit best params\n",
					"best_elasticNetParam = best_params['elasticNetParam']\n",
					"best_regParam = best_params['regParam']"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "t2yg0TmP20Wj",
					"outputId": "759fb400-daa6-40a0-884d-dabe7d19619f"
				},
				"source": [
					"# Fit model with best params\n",
					"final_model, val_f1_score = train_model(best_elasticNetParam, best_regParam) \n",
					"print(f'The trained logistic regression achieved an F1 score of {val_f1_score} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "FWisBTmC4BQO",
					"outputId": "4fa74375-cb8e-4c38-9a28-86e94d84b78e"
				},
				"source": [
					"# Evaluate F1 score on initial and tuned model\n",
					"initial_model_test_metric = evaluator_f1.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_f1.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved F1 score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "_eM81Zmw20Wk",
					"outputId": "c1f0551f-33b6-4060-a83e-34e827f517e7"
				},
				"source": [
					"# Evaluate AUROC on initial and tuned model\n",
					"initial_model_test_metric = evaluator_auroc.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_auroc.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved AUROC score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "5MfEN52Y20Wm",
					"outputId": "d07d4d99-f373-40a4-82cf-272c698b81b2"
				},
				"source": [
					"# Set up logistic regression pipeline\n",
					"lr = LogisticRegression(labelCol='label', \n",
					"                        featuresCol='scaledFeatures', \n",
					"                        family='binomial', \n",
					"                        maxIter=100, \n",
					"                        regParam=0.0, \n",
					"                        elasticNetParam=0.0)\n",
					"\n",
					"pipeline_lr = Pipeline(stages=[mmScaler, lr])\n",
					"search_time_start = time.time()\n",
					"pipelineModel_lr_hyperopt = pipeline_lr.fit(trainDF)\n",
					"print('Time to fit best model:', time.time() - search_time_start)\n",
					"pipelineModel_lr_hyperopt.save('/content/drive/MyDrive/LoanStatus/Python/Models/ML/SparkML/Models/Hyperopt/pipelineModel_lr_hyperopt_us_f1_100trials')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "e-iQ299ImjWu",
					"outputId": "04b07e14-6683-4f63-80c9-785b5baa70a5"
				},
				"source": [
					"# Predict and find AUROC, test error and accuracy\n",
					"prediction_lr = pipelineModel_lr_hyperopt.transform(testDF) \n",
					"\n",
					"lr_auroc = evaluator_auroc.evaluate(prediction_lr)\n",
					"print('Hyperopt: Logistic Regression')\n",
					"print('Area under ROC curve: %g' % (lr_auroc))\n",
					"print('Test Error: %g ' % (1.0 - lr_auroc))\n",
					"print('Accuracy:', evaluator_acc.evaluate(prediction_lr)) "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "yHTFGrgsOMo5"
				},
				"source": [
					"## LinearSVC"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "GF4eXWpYOSrd"
				},
				"source": [
					"### AUROC Score "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "jCGAljEHwwxn"
				},
				"source": [
					"#### 100 Trials"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "nlqfKdAiraVY"
				},
				"source": [
					"def train_model(regParam, tol, maxIter):\n",
					"  \n",
					"  \"\"\"\n",
					"   - Input: Hyperparameters for tuning\n",
					"   - Return: AUROC score on the validation set\n",
					"  \"\"\"\n",
					" \n",
					"  # Use MLflow to track with 'nested=True' logged as a child run \n",
					"  with mlflow.start_run(nested=True):\n",
					"\n",
					"    # Standard scaler\n",
					"    stdScaler = StandardScaler(inputCol='unscaledFeatures', \n",
					"                               outputCol='scaledFeatures', \n",
					"                               withStd=True, \n",
					"                               withMean=False)\n",
					"    \n",
					"    # Define model\n",
					"    lsvc = LinearSVC(labelCol='label', \n",
					"                     featuresCol='scaledFeatures',\n",
					"                     regParam=regParam,\n",
					"                     tol=tol,\n",
					"                     maxIter=maxIter)\n",
					"\n",
					"    print('\\nTrial Parameters:')\n",
					"    print('regParam:', lsvc.getRegParam())\n",
					"    print('tol:', lsvc.getTol())\n",
					"    print('maxIter:', lsvc.getMaxIter())\n",
					"\n",
					"    # Create pipeline\n",
					"    pipeline_lsvc_hpo = Pipeline(stages=[stdScaler, lsvc])\n",
					"\n",
					"    # Define an evaluation metric\n",
					"    evaluator_auroc = BinaryClassificationEvaluator(labelCol='label', \n",
					"                                                    metricName='areaUnderROC')\n",
					"\n",
					"    # Fit model\n",
					"    model = pipeline_lsvc_hpo.fit(trainDF)   \n",
					"\n",
					"    # Evaluate the model on the validation dataset\n",
					"    predictions = model.transform(testDF)\n",
					"    validation_metric = evaluator_auroc.evaluate(predictions)\n",
					"\n",
					"    mlflow.log_metric('val_AUROC_score', validation_metric)\n",
					" \n",
					"  return model, validation_metric"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "gX1HBajeraVY",
					"outputId": "598c897c-272c-4d2b-8687-720532cbfca0"
				},
				"source": [
					"# Run initial model\n",
					"initial_model, val_metric = train_model(regParam=0.0, tol=1e-5, maxIter=100)\n",
					"print(f'The trained LinearSVC achieved an AUROC score of {val_metric} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "q0gSw33TraVZ"
				},
				"source": [
					"def train_with_hyperopt(params):\n",
					"  \n",
					"  \"\"\"\n",
					"  Train method where hyperparameters are passed to hyperopt.fmin()\n",
					"  - Input: Hyperparameters (params) in dictionary\n",
					"  - Return: Dictionary with 'loss' and 'status' (success/failure of run)\n",
					"  \"\"\"\n",
					"\n",
					"  # Convert integer params to int type if searching over continuous values\n",
					"  regParam = params['regParam']\n",
					"  tol = params['tol']\n",
					"  maxIter = int(params['maxIter'])\n",
					"\n",
					"  # Train model\n",
					"  model, AUROC_score = train_model(regParam, tol, maxIter)\n",
					"\n",
					"  # Return a loss to monitor\n",
					"  loss = 1 - AUROC_score\n",
					"  print('Trial loss:', loss)\n",
					"\n",
					"  return {'loss': loss, 'status': STATUS_OK}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "E08IDo0kraVa"
				},
				"source": [
					"# Define parameter space for HPO\n",
					"space = {\n",
					"  'regParam': hp.quniform('regParam',  0, 1, q=0.01),\n",
					"  'tol': hp.quniform('tol', 0, 1e-3, q=5e-8),\n",
					"  'maxIter': scope.int(hp.quniform('maxIter', 100, 1000, q=100)),\n",
					"}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "4mDZNLN2raVb",
					"outputId": "9f904197-e4c6-4b77-e54e-c5f30bf47847",
					"scrolled": true,
					"tags": []
				},
				"source": [
					"# Run HPO\n",
					"algo=tpe.suggest\n",
					"\n",
					"with mlflow.start_run():\n",
					"    \n",
					"  best_params = fmin( \n",
					"      fn=train_with_hyperopt,\n",
					"      space=space,\n",
					"      algo=algo,\n",
					"      max_evals=100\n",
					"  )"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "gFYSgj1_raVb",
					"outputId": "f0a12d1a-4ec0-4ce5-a623-2d090579c041"
				},
				"source": [
					"# Print best params\n",
					"best_params"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "vndbQ5UkraVc"
				},
				"source": [
					"# Define vars to fit best params\n",
					"best_tol = best_params['tol']\n",
					"best_regParam = best_params['regParam']\n",
					"best_maxIter = int(best_params['maxIter'])"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "6-zqXzwUraVc",
					"outputId": "49b26bd3-7328-498f-abf8-385e53304aff"
				},
				"source": [
					"# Fit model with best params\n",
					"final_model, val_auroc_score = train_model(best_regParam, best_tol, best_maxIter)\n",
					"print(f'The trained LinearSVC achieved an AUROC score of {val_auroc_score} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "9ECAfRwaraVd",
					"outputId": "b832a1a0-7539-4c2f-9a05-d1f44138f350"
				},
				"source": [
					"# Evaluate AUROC on initial and tuned model\n",
					"initial_model_test_metric = evaluator_auroc.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_auroc.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved AUROC score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "8ehUuGNTraVd",
					"outputId": "f74c1123-749e-43c5-e9a6-e7c57b2749b8"
				},
				"source": [
					"# Evaluate F1 on initial and tuned model\n",
					"initial_model_test_metric = evaluator_f1.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_f1.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved F1 score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "yVmVwzVhyV_3",
					"outputId": "fb35403a-f55d-41c3-e209-f5e05ba82a89"
				},
				"source": [
					"# Set up LinearSVC pipeline: {'maxIter': 500.0, 'regParam': 0.0, 'tol': 0.0009712999999999999}\n",
					"lsvc = LinearSVC(labelCol='label', \n",
					"                 featuresCol='scaledFeatures', \n",
					"                 maxIter=best_maxIter, \n",
					"                 regParam=best_regParam, \n",
					"                 tol=best_tol)\n",
					"\n",
					"pipeline_lsvc = Pipeline(stages=[stdScaler, lsvc])\n",
					"search_time_start = time.time()\n",
					"pipelineModel_lsvc_hyperopt = pipeline_lsvc.fit(trainDF)\n",
					"print('Time to fit best model:', time.time() - search_time_start)\n",
					"pipelineModel_lsvc_hyperopt.save('/content/drive/MyDrive/LoanStatus/Python/Models/ML/SparkML/Models/Hyperopt/pipelineModel_lsvc_hyperopt_us_auroc')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "LRHUsdxq8Hgk",
					"outputId": "2e3e4763-0c63-4719-d7eb-cc40841051d9"
				},
				"source": [
					"# Predict and find AUROC, test error and accuracy\n",
					"prediction_lsvc = pipelineModel_lsvc_hyperopt.transform(testDF) \n",
					"\n",
					"lsvc_auroc = evaluator_auroc.evaluate(prediction_lsvc)\n",
					"print('Hyperopt: LinearSVC')\n",
					"print('Area under ROC curve: %g' % (lsvc_auroc))\n",
					"print('Test Error: %g' % (1.0 - lsvc_auroc))\n",
					"print('Accuracy:', evaluator_acc.evaluate(prediction_lsvc)) "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "ZIDQ2CIDOj7i"
				},
				"source": [
					"### F1 Score"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "WWflOhIXxH4P"
				},
				"source": [
					"#### 100 Trials"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "PW1QFCxfraVC"
				},
				"source": [
					"def train_model(regParam, tol, maxIter):\n",
					"  \n",
					"  \"\"\"\n",
					"   - Input: Hyperparameters for tuning\n",
					"   - Return: F1 score on the validation set\n",
					"  \"\"\"\n",
					"\n",
					"  # Use MLflow to track with 'nested=True' logged as a child run \n",
					"  with mlflow.start_run(nested=True):\n",
					"\n",
					"    # Standard scaler\n",
					"    stdScaler = StandardScaler(inputCol='unscaledFeatures', \n",
					"                               outputCol='scaledFeatures', \n",
					"                               withStd=True, \n",
					"                               withMean=False)\n",
					"    \n",
					"    # Define model\n",
					"    lsvc = LinearSVC(labelCol='label', \n",
					"                     featuresCol='scaledFeatures',\n",
					"                     regParam=regParam,\n",
					"                     tol=tol,\n",
					"                     maxIter=maxIter)\n",
					"\n",
					"    print('\\nTrial Parameters:')\n",
					"    print('regParam:', lsvc.getRegParam())\n",
					"    print('tol:', lsvc.getTol())\n",
					"    print('maxIter:', lsvc.getMaxIter())\n",
					"\n",
					"    # Create pipeline\n",
					"    pipeline_lsvc_hpo = Pipeline(stages=[stdScaler, lsvc])\n",
					"\n",
					"    # Define an evaluation metric\n",
					"    evaluator_f1 = MulticlassClassificationEvaluator(labelCol='label', \n",
					"                                                     metricName='f1')\n",
					"\n",
					"    # Fit model\n",
					"    model = pipeline_lsvc_hpo.fit(trainDF)   \n",
					"\n",
					"    # Evaluate the model on the validation set\n",
					"    predictions = model.transform(testDF)\n",
					"    validation_metric = evaluator_f1.evaluate(predictions)\n",
					"\n",
					"    mlflow.log_metric('val_f1_score', validation_metric)\n",
					" \n",
					"  return model, validation_metric"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "A8_9lZ2araVD",
					"outputId": "b861b8a8-6cfc-4220-b249-dc4b6cd5c6d6"
				},
				"source": [
					"# Run initial model\n",
					"initial_model, val_metric = train_model(regParam=0.0, tol=1e-5, maxIter=100)\n",
					"print(f'The trained LinearSVC achieved an F1 score of {val_metric} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "to1pIAQPraVE"
				},
				"source": [
					"def train_with_hyperopt(params):\n",
					"  \n",
					"  \"\"\"\n",
					"  Train method where hyperparameters are passed to hyperopt.fmin()\n",
					"  - Input: Hyperparameters (params) in dictionary\n",
					"  - Return: Dictionary with 'loss' and 'status' (success/failure of run)\n",
					"  \"\"\"\n",
					"\n",
					"  # Convert integer params to int type if searching over continuous values\n",
					"  regParam = params['regParam']\n",
					"  tol = params['tol']\n",
					"  maxIter = int(params['maxIter'])\n",
					"\n",
					"  # Train model\n",
					"  model, f1_score = train_model(regParam, tol, maxIter)\n",
					"\n",
					"  # Return a loss to monitor\n",
					"  loss = 1 - f1_score\n",
					"  print('Trial loss:', loss)\n",
					"\n",
					"  return {'loss': loss, 'status': STATUS_OK}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "qrw1LxU5raVF"
				},
				"source": [
					"# Define parameter space for HPO\n",
					"space = {\n",
					"  'regParam': hp.quniform('regParam', 0, 1, q=0.01),\n",
					"  'tol': hp.quniform('tol', 0, 1e-3, q=5e-8),\n",
					"  'maxIter': scope.int(hp.quniform('maxIter', 100, 1000, q=100)),\n",
					"}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "FMKq-CHQraVF",
					"outputId": "08c21edd-bcda-4d63-cd85-c3cc3a98351d",
					"scrolled": true,
					"tags": []
				},
				"source": [
					"# Run HPO\n",
					"algo=tpe.suggest\n",
					"\n",
					"with mlflow.start_run():\n",
					"    \n",
					"  best_params = fmin( \n",
					"      fn=train_with_hyperopt,\n",
					"      space=space,\n",
					"      algo=algo,\n",
					"      max_evals=100\n",
					"  )"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "w4hLLlAoraVU",
					"outputId": "02187707-77f1-486e-c28e-fcc449a4abc2"
				},
				"source": [
					"# Print best params\n",
					"best_params"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "Yki4a6tbraVV"
				},
				"source": [
					"# Define vars to fit best params\n",
					"best_tol = best_params['tol']\n",
					"best_regParam = best_params['regParam']\n",
					"best_maxIter = int(best_params['maxIter'])"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "fP4FGpU1raVV",
					"outputId": "e5cfa341-70e8-4355-f573-c574a3bc7bf3"
				},
				"source": [
					"# Fit model with best params\n",
					"final_model, val_f1_score = train_model(best_regParam, best_tol, best_maxIter)\n",
					"print(f'The trained LinearSVC achieved an F1 score of {val_f1_score} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "gUCX3n_SraVV",
					"outputId": "bee3c258-a533-44a9-f796-3c7f3d45933d"
				},
				"source": [
					"# Evaluate F1 on initial and tuned model\n",
					"initial_model_test_metric = evaluator_f1.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_f1.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved F1 score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "rENqJKnRraVX",
					"outputId": "fffddfe3-eb10-41bf-8ad6-7a92c62b52e7"
				},
				"source": [
					"# Evaluate AUROC on initial and tuned model\n",
					"initial_model_test_metric = evaluator_auroc.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_auroc.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved AUROC score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "fD9Qt4JVx4pF",
					"outputId": "e543b903-d51c-4a28-9ef6-99b524a45067"
				},
				"source": [
					"# Set up LinearSVC pipeline: {'maxIter': 300.0, 'regParam': 0.0, 'tol': 0.00078725}\n",
					"lsvc = LinearSVC(labelCol='label',\n",
					"                 featuresCol='scaledFeatures',\n",
					"                 regParam=best_regParam,\n",
					"                 tol=best_tol,\n",
					"                 maxIter=best_maxIter)\n",
					"\n",
					"pipeline_lsvc = Pipeline(stages=[stdScaler, lsvc])\n",
					"search_time_start = time.time()\n",
					"pipelineModel_lsvc_hyperopt = pipeline_lsvc.fit(trainDF)\n",
					"print('Time to fit best model:', time.time() - search_time_start)\n",
					"pipelineModel_lsvc_hyperopt.save('/content/drive/MyDrive/LoanStatus/Python/Models/ML/SparkML/Models/Hyperopt/pipelineModel_lsvc_hyperopt_us_f1')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "a_WrQdxOvLKy",
					"outputId": "a56f9bcf-8261-44dc-d631-fd1bcaa0bf2f"
				},
				"source": [
					"# Predict and find AUROC, test error and accuracy\n",
					"prediction_lsvc = pipelineModel_lsvc_hyperopt.transform(testDF) \n",
					"\n",
					"lsvc_auroc = evaluator_auroc.evaluate(prediction_lsvc)\n",
					"print('Hyperopt: LinearSVC')\n",
					"print('Area under ROC curve: %g' % (lsvc_auroc))\n",
					"print('Test Error: %g' % (1.0 - lsvc_auroc))\n",
					"print('Accuracy:', evaluator_acc.evaluate(prediction_lsvc)) "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "k3z8VzFiOrPV"
				},
				"source": [
					"## Decision Tree"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "LxxZ2kN_OwZD"
				},
				"source": [
					"### AUROC Score"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "5Jzj0HMsZRnK"
				},
				"source": [
					"##### 50 Trials "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "_nMhrEY-W43M"
				},
				"source": [
					"def train_model(maxDepth, maxBins):\n",
					"\n",
					"  \"\"\"\n",
					"   - Input: Hyperparameters for tuning\n",
					"   - Return: AUROC score on the validation set\n",
					"  \"\"\"\n",
					" \n",
					"  # Use MLflow to track with 'nested=True' logged as a child run \n",
					"  with mlflow.start_run(nested=True):\n",
					"\n",
					"    # Define model\n",
					"    dtc = DecisionTreeClassifier(labelCol='label', \n",
					"                                featuresCol='unscaledFeatures',\n",
					"                                maxDepth=maxDepth,\n",
					"                                maxBins=maxBins,\n",
					"                                seed=seed_value)\n",
					"\n",
					"    print('\\nTrial Parameters:')\n",
					"    print('maxDepth:', dtc.getMaxDepth())\n",
					"    print('maxBins:', dtc.getMaxBins())\n",
					"    \n",
					"    # Create pipeline\n",
					"    pipeline_dt_hpo = Pipeline(stages=[dtc])\n",
					"\n",
					"    # Define an evaluation metric\n",
					"    evaluator_auroc = BinaryClassificationEvaluator(labelCol='label', \n",
					"                                                    metricName='areaUnderROC')\n",
					"\n",
					"    # Fit model\n",
					"    model = pipeline_dt_hpo.fit(trainDF)   \n",
					"    \n",
					"    # Evaluate the model on the validation dataset\n",
					"    predictions = model.transform(testDF)\n",
					"    validation_metric = evaluator_auroc.evaluate(predictions)\n",
					"\n",
					"    mlflow.log_metric('val_AUROC_score', validation_metric)\n",
					" \n",
					"  return model, validation_metric"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "nUGQoAtkW43N",
					"outputId": "dd363f79-addb-4cc3-b550-642700285c88"
				},
				"source": [
					"# Run initial model \n",
					"search_time_start = time.time()\n",
					"initial_model, val_metric = train_model(maxDepth=5, maxBins=16)\n",
					"print('Time to fit model:', time.time() - search_time_start)\n",
					"print(f'The trained decision tree classifier achieved an AUROC score of {val_metric} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "UcSrGXIeW43N"
				},
				"source": [
					"def train_with_hyperopt(params):\n",
					"\n",
					"  \"\"\"\n",
					"  Train method where hyperparameters are passed to hyperopt.fmin()\n",
					"  - Input: Hyperparameters (params) in dictionary\n",
					"  - Return: Dictionary with 'loss' and 'status' (success/failure of run)\n",
					"  \"\"\"\n",
					"\n",
					"  # Convert integer params to int type if searching over continuous values\n",
					"  maxDepth = int(params['maxDepth'])\n",
					"  maxBins = int(params['maxBins'])\n",
					"\n",
					"  # Train model\n",
					"  model, AUROC_score = train_model(maxDepth, maxBins)\n",
					"  \n",
					"  # Return a loss to monitor\n",
					"  loss = 1 - AUROC_score\n",
					"  print('Trial loss:', loss)\n",
					"    \n",
					"  return {'loss': loss, 'status': STATUS_OK}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "9hFXU-4xW43N"
				},
				"source": [
					"# Define parameter space for HPO\n",
					"space = {\n",
					"  'maxDepth': scope.int(hp.quniform('maxDepth', 5, 30, q=1)),\n",
					"  'maxBins': scope.int(hp.quniform('maxBins', 16, 128, q=16)),\n",
					"}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "zq2yM-J-W43O",
					"outputId": "73d9fe1d-21bd-441c-cceb-68319e79ce59",
					"scrolled": true,
					"tags": []
				},
				"source": [
					"# Run HPO\n",
					"algo=tpe.suggest\n",
					"\n",
					"with mlflow.start_run():\n",
					"    \n",
					"  best_params = fmin(\n",
					"    fn=train_with_hyperopt,\n",
					"    space=space,\n",
					"    algo=algo,\n",
					"    max_evals=50\n",
					"  )"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "HNNhYYF5W43O",
					"outputId": "c0e62c70-0cc6-4669-b098-e8616cf6c53d"
				},
				"source": [
					"# Print best params\n",
					"best_params"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "-9nPFPrMW43O"
				},
				"source": [
					"# Define vars to fit best params\n",
					"best_maxDepth = int(best_params['maxDepth'])\n",
					"best_maxBins = int(best_params['maxBins'])"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "WzK5s_2dW43Q",
					"outputId": "dbc39a3c-6eb4-40a5-f59a-e6d69001c370"
				},
				"source": [
					"# Fit model with best params\n",
					"final_model, val_AUROC_score = train_model(best_maxDepth, best_maxBins)\n",
					"print(f'The trained decision tree classifier achieved an AUROC score of {val_AUROC_score} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "BU8LQwUeW43R",
					"outputId": "2cfc63bc-7fcd-430d-e6ab-db138ab6d6f5"
				},
				"source": [
					"# Evaluate AUROC on initial and tuned model\n",
					"initial_model_test_metric = evaluator_auroc.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_auroc.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved AUROC score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "yWnrC-blW43R",
					"outputId": "45c9553c-37ae-47d4-be5b-6e55ad01f28e"
				},
				"source": [
					"# Evaluate F1 on initial and tuned model\n",
					"initial_model_test_metric = evaluator_f1.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_f1.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved F1 score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "cglzXHwdUxIn",
					"outputId": "68bc470f-6af2-478a-d8b0-f4ca6100fc77"
				},
				"source": [
					"# Set up DecisionTree pipeline - maxDepth=26, maxBins=80\n",
					"dt = DecisionTreeClassifier(labelCol='label', \n",
					"                            featuresCol='unscaledFeatures', \n",
					"                            impurity='gini', \n",
					"                            maxDepth=best_maxDepth, \n",
					"                            maxBins=best_maxBins,                            \n",
					"                            seed=seed_value)\n",
					"\n",
					"search_time_start = time.time()\n",
					"pipeline_dt = Pipeline(stages=[dt])\n",
					"pipelineModel_dt_hyperopt = pipeline_dt.fit(trainDF)\n",
					"print('Time to fit best model:', time.time() - search_time_start)\n",
					"pipelineModel_dt_hyperopt.save('/content/drive/MyDrive/LoanStatus/Python/Models/ML/SparkML/Models/Hyperopt/pipelineModel_dt_hyperopt_us_auroc')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "qR1rki_ev8T8",
					"outputId": "0833a867-4d43-4e1e-b895-71ea662cc160"
				},
				"source": [
					"# Predict and find AUROC, test error and accuracy\n",
					"prediction_dt = pipelineModel_dt_hyperopt.transform(testDF) \n",
					"\n",
					"dt_auroc = evaluator_auroc.evaluate(prediction_dt)\n",
					"print('Hyperopt: Decision Tree')\n",
					"print('Area under ROC curve: %g' % (dt_auroc))\n",
					"print('Test Error: %g '% (1.0 - dt_auroc))\n",
					"print('Accuracy:', evaluator_acc.evaluate(prediction_dt)) "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "TJmy29dW2Rkd"
				},
				"source": [
					"### F1 Score"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "mbzMjJNWZhCh"
				},
				"source": [
					"##### 50 Trials "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "hbkeLpCKUFXG"
				},
				"source": [
					"def train_model(maxDepth, maxBins):\n",
					"\n",
					"  \"\"\"\n",
					"   - Input: Hyperparameters for tuning\n",
					"   - Return: F1 score on the validation set\n",
					"  \"\"\"\n",
					"\n",
					"  # Use MLflow to track with 'nested=True' logged as a child run \n",
					"  with mlflow.start_run(nested=True):\n",
					"\n",
					"    # Define model\n",
					"    dtc = DecisionTreeClassifier(labelCol='label', \n",
					"                                featuresCol='unscaledFeatures',\n",
					"                                maxDepth=maxDepth,\n",
					"                                maxBins=maxBins,\n",
					"                                seed=seed_value)\n",
					"\n",
					"    print('\\nTrial Parameters:')\n",
					"    print('maxDepth:', dtc.getMaxDepth())\n",
					"    print('maxBins:', dtc.getMaxBins())\n",
					"    \n",
					"    # Create pipeline\n",
					"    pipeline_dt_hpo = Pipeline(stages=[dtc])\n",
					"\n",
					"    # Define an evaluation metric\n",
					"    evaluator_f1 = MulticlassClassificationEvaluator(labelCol='label', \n",
					"                                                     metricName='f1')\n",
					"    # Fit model\n",
					"    model = pipeline_dt_hpo.fit(trainDF)   \n",
					"    \n",
					"    # Evaluate the model on the validation dataset\n",
					"    predictions = model.transform(testDF)\n",
					"    validation_metric = evaluator_f1.evaluate(predictions)\n",
					"\n",
					"    mlflow.log_metric('val_f1_score', validation_metric)\n",
					" \n",
					"  return model, validation_metric"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "kmfTFtn0UFXG",
					"outputId": "8125a4e1-4f5a-4df5-8a11-49e9bde7e6c1"
				},
				"source": [
					"# Run initial model \n",
					"search_time_start = time.time()\n",
					"initial_model, val_metric = train_model(maxDepth=5, maxBins=16)\n",
					"print('Time to fit model:', time.time() - search_time_start)\n",
					"print(f'The trained decision tree classifier achieved an F1 score of {val_metric} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "VrzzBtuyUFXH"
				},
				"source": [
					"def train_with_hyperopt(params):\n",
					"\n",
					"  \"\"\"\n",
					"  Train method where hyperparameters are passed to hyperopt.fmin()\n",
					"  - Input: Hyperparameters (params) in dictionary\n",
					"  - Return: Dictionary with 'loss' and 'status' (success/failure of run)\n",
					"  \"\"\"\n",
					"\n",
					"  # Convert integer params to int type if searching over continuous values\n",
					"  maxDepth = int(params['maxDepth'])\n",
					"  maxBins = int(params['maxBins'])\n",
					"\n",
					"  # Train model\n",
					"  model, f1_score = train_model(maxDepth, maxBins)\n",
					"  \n",
					"  # Return a loss to monitor\n",
					"  loss = 1 - f1_score\n",
					"  print('Trial loss:', loss)\n",
					"    \n",
					"  return {'loss': loss, 'status': STATUS_OK}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "FBOKKC4pUFXI"
				},
				"source": [
					"# Define parameter space for HPO\n",
					"space = {\n",
					"  'maxDepth': scope.int(hp.quniform('maxDepth', 5, 30, q=1)),\n",
					"  'maxBins': scope.int(hp.quniform('maxBins', 16, 128, q=16)),\n",
					"}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "lWT-jmC7UFXI",
					"outputId": "ed6f7907-c6b1-455a-d45c-5f52c0366c62",
					"scrolled": true,
					"tags": []
				},
				"source": [
					"# Run HPO\n",
					"algo=tpe.suggest\n",
					"\n",
					"with mlflow.start_run():\n",
					"    \n",
					"  best_params = fmin(\n",
					"    fn=train_with_hyperopt,\n",
					"    space=space,\n",
					"    algo=algo,\n",
					"    max_evals=50\n",
					"  )"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "gex7gXoLUFXK",
					"outputId": "15221afb-ab6d-48b3-927f-a5ea4ae95ad0"
				},
				"source": [
					"# Print best params\n",
					"best_params"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "CArth57wUFXL"
				},
				"source": [
					"# Define vars to fit best params\n",
					"best_maxDepth = int(best_params['maxDepth'])\n",
					"best_maxBins = int(best_params['maxBins'])"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "0YvFEJalUFXL",
					"outputId": "41eb0f9f-ca4d-4fed-d827-01d2dc94052c"
				},
				"source": [
					"# Fit model with best params\n",
					"final_model, val_f1_score = train_model(best_maxDepth, best_maxBins)\n",
					"print(f'The trained decision tree classifier achieved an F1 score of {val_f1_score} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "DW9GZnFxUFXM",
					"outputId": "57ebd994-2846-4f48-e7a6-83778bb72148"
				},
				"source": [
					"# Evaluate F1 on initial and tuned model\n",
					"initial_model_test_metric = evaluator_f1.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_f1.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved F1 score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "VM0WqpWxUFXN",
					"outputId": "a91c3dcd-6a40-401f-dd22-1da58400955b"
				},
				"source": [
					"# Evaluate AUROC on initial and tuned model\n",
					"initial_model_test_metric = evaluator_auroc.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_auroc.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved AUROC score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "30u1U2ctUFXO",
					"outputId": "bca34e4d-62e0-4048-edb2-2dfaf319c4cb"
				},
				"source": [
					"# Set up decision tree pipeline: {'maxBins': 112.0, 'maxDepth': 15.0}\n",
					"dt = DecisionTreeClassifier(labelCol='label', \n",
					"                            featuresCol='unscaledFeatures', \n",
					"                            impurity='gini', \n",
					"                            maxDepth=best_maxDepth, \n",
					"                            maxBins=best_maxBins,\n",
					"                            seed=seed_value)\n",
					"\n",
					"search_time_start = time.time()\n",
					"pipeline_dt = Pipeline(stages=[dt])\n",
					"pipelineModel_dt_hyperopt = pipeline_dt.fit(trainDF)\n",
					"print('Time to fit best model:', time.time() - search_time_start)\n",
					"pipelineModel_dt_hyperopt.save('/content/drive/MyDrive/LoanStatus/Python/Models/ML/SparkML/Models/Hyperopt/pipelineModel_dt_hyperopt_us_f1')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "-qN_HwnVv9ER",
					"outputId": "65197020-7931-4e76-82f2-067e1579ad28"
				},
				"source": [
					"# Predict and find AUROC, test error and accuracy\n",
					"prediction_dt = pipelineModel_dt_hyperopt.transform(testDF) \n",
					"\n",
					"dt_auroc = evaluator_auroc.evaluate(prediction_dt)\n",
					"print('Hyperopt: Decision Tree')\n",
					"print('Area under ROC curve: %g' % (dt_auroc))\n",
					"print('Test Error: %g '% (1.0 - dt_auroc))\n",
					"print('Accuracy:', evaluator_acc.evaluate(prediction_dt)) "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "8gcVp0IV2t0x"
				},
				"source": [
					"## Random Forest"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "cjbBW9wB26jc"
				},
				"source": [
					"### AUROC Score"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "WFFHZbqp6wxa"
				},
				"source": [
					"#### 30 Trials "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "TvON7Um-7cFt"
				},
				"source": [
					"def train_model(maxDepth, maxBins, numTrees):\n",
					"\n",
					"  \"\"\"\n",
					"   - Input: Hyperparameters for tuning\n",
					"   - Return: AUROC score on the validation set\n",
					"  \"\"\"\n",
					" \n",
					"  # Use MLflow to track with 'nested=True' logged as a child run \n",
					"  with mlflow.start_run(nested=True):\n",
					"\n",
					"    # Define model\n",
					"    rf = RandomForestClassifier(labelCol='label', \n",
					"                                featuresCol='unscaledFeatures',\n",
					"                                maxDepth=maxDepth,\n",
					"                                maxBins=maxBins,\n",
					"                                numTrees=numTrees,\n",
					"                                seed=seed_value)\n",
					"\n",
					"    print('\\nTrial Parameters:')\n",
					"    print('maxDepth:', rf.getMaxDepth())\n",
					"    print('maxBins:', rf.getMaxBins())\t    \n",
					"    print('numTrees:', rf.getNumTrees())\n",
					"\n",
					"    # Create pipeline\n",
					"    pipeline_rf_hpo = Pipeline(stages=[rf])\n",
					"\n",
					"    # Define an evaluation metric\n",
					"    evaluator_auroc = BinaryClassificationEvaluator(labelCol='label', \n",
					"                                                    metricName='areaUnderROC')\n",
					"\n",
					"    # Fit model\n",
					"    model = pipeline_rf_hpo.fit(trainDF)   \n",
					"\n",
					"    # Evaluate the model on the validation dataset\n",
					"    predictions = model.transform(testDF)\n",
					"    validation_metric = evaluator_auroc.evaluate(predictions)\n",
					"\n",
					"    mlflow.log_metric('val_AUROC_score', validation_metric)\n",
					" \n",
					"  return model, validation_metric"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "tm8i234o7cFu",
					"outputId": "e9da19e5-b5ea-4c22-9c98-e015f8ec8ecf"
				},
				"source": [
					"# Run initial model \n",
					"initial_model, val_metric = train_model(maxDepth=5, maxBins=32, numTrees=10) \n",
					"print(f'The trained random forest classifier achieved an AUROC score of {val_metric} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "t9qIthlF600w"
				},
				"source": [
					"def train_with_hyperopt(params):\n",
					"\n",
					"  \"\"\"\n",
					"  Train method where hyperparameters are passed to hyperopt.fmin()\n",
					"  - Input: Hyperparameters (params) in dictionary\n",
					"  - Return: Dictionary with 'loss' and 'status' (success/failure of run)\n",
					"  \"\"\"\n",
					"\n",
					"  # Convert integer params to int type if searching over continuous values\n",
					"  maxDepth = int(params['maxDepth'])\n",
					"  maxBins = int(params['maxBins'])\n",
					"  numTrees = int(params['numTrees'])\n",
					"\n",
					"  # Train model\n",
					"  model, AUROC_score = train_model(maxDepth, maxBins, numTrees) \n",
					"\n",
					"  # Return a loss to monitor\n",
					"  loss = 1 - AUROC_score\n",
					"  print('Trial loss: ', loss)\n",
					"\n",
					"  return {'loss': loss, 'status': STATUS_OK}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "J18GRyYP6003"
				},
				"source": [
					"# Define parameter space for HPO\n",
					"space = {\n",
					"  'maxDepth': scope.int(hp.quniform('maxDepth', 5, 20, q=1)),\n",
					"  'maxBins': scope.int(hp.quniform('maxBins', 4, 64, q=4)),\n",
					"  'numTrees': scope.int(hp.quniform('numTrees', 10, 30, q=1)),\n",
					"}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "T6tNrO_JWKqv",
					"outputId": "5124cdac-0bfc-49a1-8a91-d7878dfb128c",
					"scrolled": true,
					"tags": []
				},
				"source": [
					"# Run HPO\n",
					"algo=tpe.suggest\n",
					"\n",
					"with mlflow.start_run():\n",
					"    \n",
					"  best_params = fmin( \n",
					"      fn=train_with_hyperopt,\n",
					"      space=space,\n",
					"      algo=algo,\n",
					"      max_evals=30\n",
					"  )"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "5EC-DWf9HNQg",
					"outputId": "7462947e-7b82-4b26-9f80-ffe7b95fd19f"
				},
				"source": [
					"# Print best params\n",
					"best_params"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "PyVS1KwS601C"
				},
				"source": [
					"# Define vars to fit best params\n",
					"best_maxDepth = int(best_params['maxDepth'])\n",
					"best_maxBins = int(best_params['maxBins'])\n",
					"best_numTrees = int(best_params['numTrees'])"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "ETl9pPuvVrmD",
					"outputId": "42bcc9f8-1e98-4ff9-e275-f173c0e3b1a1"
				},
				"source": [
					"# Fit model with best params and evaluate AUROC on tuned model\n",
					"final_model, val_auroc_score = train_model(best_maxDepth, best_maxBins, best_numTrees)\n",
					"print(f'The trained random forest classifier achieved an AUROC score of {val_auroc_score} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "6IZZYxSD601F",
					"outputId": "b4fc95a1-26b1-435b-b3b5-eea489a36dac"
				},
				"source": [
					"# Evaluate AUROC on initial and tuned model\n",
					"initial_model_test_metric = evaluator_auroc.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_auroc.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved AUROC score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "HEpJ00MC601G",
					"outputId": "c26556ec-c96c-4bf0-e045-35a3da03a010"
				},
				"source": [
					"# Evaluate F1 score on initial and tuned model\n",
					"initial_model_test_metric = evaluator_f1.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_f1.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved F1 score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "T-ZQv4lzVfHK",
					"outputId": "6d427ae4-bb6d-4795-89a5-979d541acd98"
				},
				"source": [
					"# Set up RF pipeline: {'maxBins': 44.0, 'maxDepth': 20.0, 'numTrees': 21.0}\n",
					"rf = RandomForestClassifier(labelCol='label',  \n",
					"                            featuresCol='unscaledFeatures',  \n",
					"                            impurity='gini',  \n",
					"                            numTrees=best_numTrees, \n",
					"                            maxDepth=best_maxDepth, \n",
					"                            maxBins=best_maxBins,\n",
					"                            seed=seed_value)\n",
					"\n",
					"search_time_start = time.time()\n",
					"pipeline_rf = Pipeline(stages=[rf])\n",
					"pipelineModel_rf_hyperopt = pipeline_rf.fit(trainDF)\n",
					"print('Time to fit best model:', time.time() - search_time_start)\n",
					"pipelineModel_rf_hyperopt.save('/content/drive/MyDrive/LoanStatus/Python/Models/ML/SparkML/Models/Hyperopt/pipelineModel_rf_hyperopt_us_auroc_30trials')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "InhmC83jwTD8",
					"outputId": "6bbc1d8f-d66a-467c-89ef-3b323af456e5"
				},
				"source": [
					"# Predict and find AUROC, test error and accuracy\n",
					"prediction_rf = pipelineModel_rf_hyperopt.transform(testDF)\n",
					"\n",
					"rf_auroc = evaluator_auroc.evaluate(prediction_rf)\n",
					"print('Hyperopt: Random Forest')\n",
					"print('Area under ROC curve: %g' % (rf_auroc))\n",
					"print('Test Error: %g ' % (1.0 - rf_auroc))\n",
					"print('Accuracy:', evaluator_acc.evaluate(prediction_rf)) "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "TpPkvoYi8e5E"
				},
				"source": [
					"#### 20 Trials - Increased Trees & Depth"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "9T8d70yS8e5G"
				},
				"source": [
					"def train_model(maxDepth, maxBins, numTrees):\n",
					"\n",
					"  \"\"\"\n",
					"   - Input: Hyperparameters for tuning\n",
					"   - Return: AUROC score on the validation set\n",
					"  \"\"\"\n",
					" \n",
					"  # Use MLflow to track with 'nested=True' logged as a child run \n",
					"  with mlflow.start_run(nested=True):\n",
					"\n",
					"    # Define model\n",
					"    rf = RandomForestClassifier(labelCol='label', \n",
					"                                featuresCol='unscaledFeatures',\n",
					"                                maxDepth=maxDepth,\n",
					"                                maxBins=maxBins,\n",
					"                                numTrees=numTrees,\n",
					"                                seed=seed_value)\n",
					"    \n",
					"    # Create pipeline\n",
					"    pipeline_rf_hpo = Pipeline(stages=[rf])\n",
					"\n",
					"    # Define an evaluation metric\n",
					"    evaluator_auroc = BinaryClassificationEvaluator(labelCol='label', \n",
					"                                                    metricName='areaUnderROC')\n",
					"\n",
					"    print('\\nTrial Parameters:')\n",
					"    print('maxDepth:', rf.getMaxDepth())\n",
					"    print('maxBins:', rf.getMaxBins())\t    \n",
					"    print('numTrees:', rf.getNumTrees())\n",
					"    \n",
					"    # Fit model\n",
					"    model = pipeline_rf_hpo.fit(trainDF)   \n",
					"\n",
					"    # Evaluate the model on the validation dataset\n",
					"    predictions = model.transform(testDF)\n",
					"    validation_metric = evaluator_auroc.evaluate(predictions)\n",
					"\n",
					"    mlflow.log_metric('val_AUROC_score', validation_metric)\n",
					" \n",
					"  return model, validation_metric"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "ZFBR_dDD8e5J",
					"outputId": "d8133d46-2fdc-4f21-9ef8-8f2a7f7297bb"
				},
				"source": [
					"# Run initial model \n",
					"search_time_start = time.time()\n",
					"initial_model, val_metric = train_model(maxDepth=5, maxBins=32, numTrees=10) \n",
					"print('Time to fit initial model:', time.time() - search_time_start)\n",
					"print(f'The trained Random Forest classifier achieved an AUROC score of {val_metric} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "seIot_GR8e5K"
				},
				"source": [
					"def train_with_hyperopt(params):\n",
					"\n",
					"  \"\"\"\n",
					"  Train method where hyperparameters are passed to hyperopt.fmin()\n",
					"  - Input: Hyperparameters (params) in dictionary\n",
					"  - Return: Dictionary with 'loss' and 'status' (success/failure of run)\n",
					"  \"\"\"\n",
					"\n",
					"  # Convert integer params to int type if searching over continuous values\n",
					"  maxDepth = int(params['maxDepth'])\n",
					"  maxBins = int(params['maxBins'])\n",
					"  numTrees = int(params['numTrees'])\n",
					"\n",
					"  # Train model\n",
					"  model, f1_score = train_model(maxDepth, maxBins, numTrees)\n",
					"\n",
					"  # Return a loss to monitor\n",
					"  loss = 1 - f1_score\n",
					"  print('Trial loss:', loss)\n",
					"\n",
					"  return {'loss': loss, 'status': STATUS_OK}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "e4xgZoxH8e5N"
				},
				"source": [
					"# Define parameter space for HPO\n",
					"space = {\n",
					"  'maxDepth': scope.int(hp.quniform('maxDepth', 10, 30, q=5)),\n",
					"  'maxBins': scope.int(hp.quniform('maxBins', 16, 32, q=4)),\n",
					"  'numTrees': scope.int(hp.quniform('numTrees', 20, 50, q=5)),\n",
					"}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "kPnLPRLaXMy2",
					"outputId": "d04206d4-6fd9-4597-97be-92cf6d606805",
					"scrolled": true,
					"tags": []
				},
				"source": [
					"# Run HPO\n",
					"algo=tpe.suggest\n",
					"\n",
					"with mlflow.start_run():\n",
					"    \n",
					"  best_params=fmin( \n",
					"      fn=train_with_hyperopt,\n",
					"      space=space,\n",
					"      algo=algo,\n",
					"      max_evals=20\n",
					"  )"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "6tDAmfbdJhGv",
					"outputId": "a17a4fdb-8cf6-4d09-afc1-996cc790f7cf"
				},
				"source": [
					"# Print best params\n",
					"best_params"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "T4-9Cp1h8e5S"
				},
				"source": [
					"# Define vars to fit best params\n",
					"best_maxDepth = int(best_params['maxDepth'])\n",
					"best_maxBins = int(best_params['maxBins'])\n",
					"best_numTrees = int(best_params['numTrees'])"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "6JoXG8PjF8IM",
					"outputId": "b21b70e6-2deb-4c7f-97db-c10423225ace"
				},
				"source": [
					"# Fit model with best params and evaluate F1 tuned model\n",
					"final_model, val_AUROC_score = train_model(best_maxDepth, best_maxBins, \n",
					"                                           best_numTrees)\n",
					"print(f'The trained Random Forest classifier achieved an AUROC score of {val_AUROC_score} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "k8Fgpkx48e5V",
					"outputId": "6ff6ec0d-6a44-4b80-deae-7c3bdeb83511"
				},
				"source": [
					"# Evaluate F1 score on initial and tuned model\n",
					"initial_model_test_metric = evaluator_f1.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_f1.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved F1 score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "39tRJivh8e5W",
					"outputId": "0325832c-7169-40b1-e889-013e374370b4"
				},
				"source": [
					"# Evaluate AUROC on initial and tuned model\n",
					"initial_model_test_metric = evaluator_auroc.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_auroc.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved AUROC score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "XO2Kw1h1FvYH",
					"outputId": "7c65cd88-6c8f-4cce-dc58-5fb6aefbf4c1"
				},
				"source": [
					"# Set up RF pipeline: {'maxBins': 32.0, 'maxDepth': 20.0, 'numTrees': 50.0}\n",
					"rf = RandomForestClassifier(labelCol='label',  \n",
					"                            featuresCol='unscaledFeatures',  \n",
					"                            impurity='gini',  \n",
					"                            numTrees=best_numTrees, \n",
					"                            maxDepth=best_maxDepth, \n",
					"                            maxBins=best_maxBins,\n",
					"                            seed=seed_value)\n",
					"\n",
					"search_time_start = time.time()\n",
					"pipeline_rf = Pipeline(stages=[rf])\n",
					"pipelineModel_rf_hyperopt = pipeline_rf.fit(trainDF)\n",
					"print('Time to fit best model:', time.time() - search_time_start)\n",
					"pipelineModel_rf_hyperopt.save('/content/drive/MyDrive/LoanStatus/Python/Models/ML/SparkML/Models/Hyperopt/pipelineModel_rf_hyperopt_us_auroc_moreParams')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "3TNfg6iQw3oQ",
					"outputId": "f92629ea-1c7e-4ccb-ad42-8925a0183250"
				},
				"source": [
					"# Predict and find AUROC, test error and accuracy\n",
					"prediction_rf = pipelineModel_rf_hyperopt.transform(testDF)\n",
					"\n",
					"rf_auroc = evaluator_auroc.evaluate(prediction_rf)\n",
					"print('Hyperopt: Random Forest')\n",
					"print('Area under ROC curve: %g' % (rf_auroc))\n",
					"print('Test Error: %g ' % (1.0 - rf_auroc))\n",
					"print('Accuracy:', evaluator_acc.evaluate(prediction_rf)) "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "_o_r8Hti2yjA"
				},
				"source": [
					"### F1 Score"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "EWRvFqRbGZlE"
				},
				"source": [
					"#### 30 Trials - Stopped"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "FPIJYwFPGZlG"
				},
				"source": [
					"def train_model(maxDepth, maxBins, numTrees):\n",
					"\n",
					"  \"\"\"\n",
					"   - Input: Hyperparameters for tuning\n",
					"   - Return: F1 score on the validation set\n",
					"  \"\"\"\n",
					"\n",
					"  # Use MLflow to track with 'nested=True' logged as a child run \n",
					"  with mlflow.start_run(nested=True):\n",
					"\n",
					"    # Define model\n",
					"    rf = RandomForestClassifier(labelCol='label', \n",
					"                                featuresCol='unscaledFeatures',\n",
					"                                maxDepth=maxDepth,\n",
					"                                maxBins=maxBins,\n",
					"                                numTrees=numTrees,\n",
					"                                seed=seed_value)\n",
					"    \n",
					"    print('\\nTrial Parameters:')\n",
					"    print('maxDepth:', rf.getMaxDepth())\n",
					"    print('maxBins:', rf.getMaxBins())\t    \n",
					"    print('numTrees:', rf.getNumTrees())\n",
					"\n",
					"    # Create pipeline\n",
					"    pipeline_rf_hpo = Pipeline(stages=[rf])\n",
					"\n",
					"    # Define an evaluation metric\n",
					"    evaluator_f1 = MulticlassClassificationEvaluator(labelCol='label', \n",
					"                                                     metricName='f1')\n",
					"\n",
					"    # Fit model\n",
					"    model = pipeline_rf_hpo.fit(trainDF)   \n",
					"\n",
					"    # Evaluate the model on the validation dataset\n",
					"    predictions = model.transform(testDF)\n",
					"    validation_metric = evaluator_f1.evaluate(predictions)\n",
					"\n",
					"    mlflow.log_metric('val_f1_score', validation_metric)\n",
					" \n",
					"  return model, validation_metric"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "E5QGys52GZlI",
					"outputId": "11c2f22a-bd36-4386-83cf-fc6fb52a5930"
				},
				"source": [
					"# Run initial model\n",
					"search_time_start = time.time()\n",
					"initial_model, val_metric = train_model(maxDepth=5, maxBins=32, numTrees=10) \n",
					"print('Time to fit initial model:', time.time() - search_time_start)\n",
					"print(f'The trained Random Forest classifier achieved an F1 score of {val_metric} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "_ZHAC0igGZlK"
				},
				"source": [
					"def train_with_hyperopt(params):\n",
					"\n",
					"  \"\"\"\n",
					"  Train method where hyperparameters are passed to hyperopt.fmin()\n",
					"  - Input: Hyperparameters (params) in dictionary\n",
					"  - Return: Dictionary with 'loss' and 'status' (success/failure of run)\n",
					"  \"\"\"\n",
					"\n",
					"  # Convert integer params to int type if searching over continuous values\n",
					"  maxDepth = int(params['maxDepth'])\n",
					"  maxBins = int(params['maxBins'])\n",
					"  numTrees = int(params['numTrees'])\n",
					"\n",
					"  # Train model\n",
					"  model, f1_score = train_model(maxDepth, maxBins, numTrees)\n",
					"\n",
					"  # Return a loss to monitor\n",
					"  loss = 1 -f1_score\n",
					"  print('Trial loss:', loss)\n",
					"\n",
					"  return {'loss': loss, 'status': STATUS_OK}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "JkLHlMxvGZlL"
				},
				"source": [
					"# Define parameter space for HPO\n",
					"space = {\n",
					"  'maxDepth': scope.int(hp.quniform('maxDepth', 5, 20, q=1)),\n",
					"  'maxBins': scope.int(hp.quniform('maxBins', 4, 64, q=4)),\n",
					"  'numTrees': scope.int(hp.quniform('numTrees', 10, 30, q=1)),\n",
					"}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "z0j055qUXz44",
					"outputId": "e3655b95-b0a6-4c51-fbdd-57d4b3d48c15",
					"scrolled": true,
					"tags": []
				},
				"source": [
					"# Run HPO\n",
					"algo=tpe.suggest\n",
					"\n",
					"with mlflow.start_run():\n",
					"    \n",
					"  best_params=fmin( \n",
					"      fn=train_with_hyperopt,\n",
					"      space=space,\n",
					"      algo=algo,\n",
					"      max_evals=30\n",
					"  )"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "qlU_Prp4EaZn",
					"outputId": "dacaf727-6815-4015-a4e7-f2dc5c6e2201"
				},
				"source": [
					"# Print best params\n",
					"best_params"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "1rdexnE6yNFa"
				},
				"source": [
					"# Define vars to fit best params\n",
					"best_maxDepth = int(best_params['maxDepth'])\n",
					"best_maxBins = int(best_params['maxBins'])\n",
					"best_numTrees = int(best_params['numTrees'])"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "ZydJQ2MAXhCe",
					"outputId": "90226bc6-abb2-4e63-dbef-03c095fa4651"
				},
				"source": [
					"# Fit model with best params and evaluate F1 on tuned model\n",
					"final_model, val_f1_score = train_model(best_maxDepth, best_maxBins, best_numTrees)\n",
					"print(f'The trained Random Forest classifier achieved an F1 score of {val_f1_score} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "JTg19LNX9NQH",
					"outputId": "d0ca91c9-d54c-4094-a8b6-a126078655e4"
				},
				"source": [
					"# Evaluate F1 score on initial and tuned model\n",
					"initial_model_test_metric = evaluator_f1.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_f1.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved F1 score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "sTP7foRzyNFd",
					"outputId": "370f998d-fe5b-4a2c-fd58-786cac751bf5"
				},
				"source": [
					"# Evaluate AUROC on initial and tuned model\n",
					"initial_model_test_metric = evaluator_auroc.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_auroc.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved AUROC score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "xhq1GSJTXRNp",
					"outputId": "acb5747f-4ee7-4c95-a491-0f1ef4d1dcf5"
				},
				"source": [
					"# Set up RF pipeline: {'maxBins': 40.0, 'maxDepth': 20.0, 'numTrees': 28.0}\n",
					"rf = RandomForestClassifier(labelCol='label',  \n",
					"                            featuresCol='unscaledFeatures',  \n",
					"                            impurity='gini',  \n",
					"                            numTrees=best_numTrees, \n",
					"                            maxDepth=best_maxDepth, \n",
					"                            maxBins=best_maxBins,\n",
					"                            seed=seed_value)\n",
					"\n",
					"earch_time_start = time.time()\n",
					"pipeline_rf = Pipeline(stages=[rf])\n",
					"pipelineModel_rf_hyperopt = pipeline_rf.fit(trainDF)\n",
					"print('Time to fit best model:', time.time() - search_time_start)\n",
					"pipelineModel_rf_hyperopt.save('/content/drive/MyDrive/LoanStatus/Python/Models/ML/SparkML/Models/Hyperopt/pipelineModel_rf_hyperopt_us_f1_30trials')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "XUPBz6yYxcyO",
					"outputId": "e7d7ae7f-30a4-4311-c7bc-0b8be6308df5"
				},
				"source": [
					"# Predict and find AUROC, test error and accuracy\n",
					"prediction_rf = pipelineModel_rf_hyperopt.transform(testDF)\n",
					"\n",
					"rf_auroc = evaluator_auroc.evaluate(prediction_rf)\n",
					"print('Hyperopt: Random Forest')\n",
					"print('Area under ROC curve: %g' % (rf_auroc))\n",
					"print('Test Error: %g ' % (1.0 - rf_auroc))\n",
					"print('Accuracy:', evaluator_acc.evaluate(prediction_rf)) "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "3Xfj46kadMFI"
				},
				"source": [
					"#### 20 Trials - Increased Trees & Depth"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "6eCFfKwAc93N"
				},
				"source": [
					"def train_model(maxDepth, maxBins, numTrees):\n",
					"\n",
					"  \"\"\"\n",
					"   - Input: Hyperparameters for tuning\n",
					"   - Return: F1 score on the validation set\n",
					"  \"\"\"\n",
					"\n",
					"  # Use MLflow to track with 'nested=True' logged as a child run\n",
					"  with mlflow.start_run(nested=True):\n",
					"\n",
					"    # Define model\n",
					"    rf = RandomForestClassifier(labelCol='label', \n",
					"                                featuresCol='unscaledFeatures',\n",
					"                                maxDepth=maxDepth,\n",
					"                                maxBins=maxBins,\n",
					"                                numTrees=numTrees,\n",
					"                                seed=seed_value)\n",
					"    \n",
					"    # Create pipeline\n",
					"    pipeline_rf_hpo = Pipeline(stages=[rf])\n",
					"\n",
					"    # Define an evaluation metric\n",
					"    evaluator_f1 = MulticlassClassificationEvaluator(labelCol='label', \n",
					"                                                     metricName='f1')\n",
					"\n",
					"    # Fit model\n",
					"    model = pipeline_rf_hpo.fit(trainDF)   \n",
					"\n",
					"    # Evaluate the model on the validation dataset\n",
					"    predictions = model.transform(testDF)\n",
					"    validation_metric = evaluator_f1.evaluate(predictions)\n",
					"\n",
					"    mlflow.log_metric('val_f1_score', validation_metric)\n",
					" \n",
					"  return model, validation_metric"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "FRGwa-59c93P",
					"outputId": "c6f031ca-9a43-4bfc-c398-838043a69ae6"
				},
				"source": [
					"# Run initial model \n",
					"search_time_start = time.time()\n",
					"initial_model, val_metric = train_model(maxDepth=5, maxBins=32, numTrees=10) \n",
					"print('Time to fit initial model:', time.time() - search_time_start)\n",
					"print(f'The trained Random Forest classifier achieved an F1 score of {val_metric} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "-sM3iB-_c93P"
				},
				"source": [
					"def train_with_hyperopt(params):\n",
					"\n",
					"  \"\"\"\n",
					"  Train method where hyperparameters are passed to hyperopt.fmin()\n",
					"  - Input: Hyperparameters (params) in dictionary\n",
					"  - Return: Dictionary with 'loss' and 'status' (success/failure of run)\n",
					"  \"\"\"\n",
					"\n",
					"  # Convert integer params to int type if searching over continuous values\n",
					"  maxDepth = int(params['maxDepth'])\n",
					"  maxBins = int(params['maxBins'])\n",
					"  numTrees = int(params['numTrees'])\n",
					"\n",
					"  # Train model\n",
					"  model, f1_score = train_model(maxDepth, maxBins, numTrees)\n",
					"\n",
					"  # Return a loss to monitor\n",
					"  loss = 1 - f1_score\n",
					"  print('Trial loss:', loss)\n",
					"\n",
					"  return {'loss': loss, 'status': STATUS_OK}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "Hn6yXGxXc93Q"
				},
				"source": [
					"# Define parameter space for HPO\n",
					"space = {\n",
					"  'maxDepth': scope.int(hp.quniform('maxDepth', 10, 30, q=5)),\n",
					"  'maxBins': scope.int(hp.quniform('maxBins', 16, 32, q=4)),\n",
					"  'numTrees': scope.int(hp.quniform('numTrees', 20, 50, q=5)),\n",
					"}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "MKxXqADFX8cR",
					"outputId": "833be2fd-348f-4b96-9701-9307757ea473",
					"scrolled": true,
					"tags": []
				},
				"source": [
					"# Run HPO\n",
					"algo=tpe.suggest\n",
					"\n",
					"with mlflow.start_run():\n",
					"    \n",
					"  best_params=fmin( \n",
					"      fn=train_with_hyperopt,\n",
					"      space=space,\n",
					"      algo=algo,\n",
					"      max_evals=20\n",
					"  )"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "NURzpjAvEzYD",
					"outputId": "b5999c86-7980-4044-d6a8-db6b28acc219"
				},
				"source": [
					"# Print best params\n",
					"best_params"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "llg188OPc93T"
				},
				"source": [
					"# Define vars to fit best params\n",
					"best_maxDepth = int(best_params['maxDepth'])\n",
					"best_maxBins = int(best_params['maxBins'])\n",
					"best_numTrees = int(best_params['numTrees'])"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "QL-6s1asX_4s",
					"outputId": "a1503931-61c6-4e51-9392-488385c9833c"
				},
				"source": [
					"# Fit model with best params and evaluate F1 tuned model\n",
					"final_model, val_f1_score = train_model(best_maxDepth, best_maxBins, \n",
					"                                        best_numTrees)\n",
					"print(f'The trained Random Forest classifier achieved an F1 score of {val_f1_score} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "w4PUvi_8c93U",
					"outputId": "d8fbeca1-380f-40c3-8c71-103dd248f8ab"
				},
				"source": [
					"# Evaluate F1 score on initial and tuned model\n",
					"initial_model_test_metric = evaluator_f1.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_f1.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved F1 score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "Ef7vWOwgc93V",
					"outputId": "96ebbd83-d0c6-4004-bfee-c30321c14f62"
				},
				"source": [
					"# Evaluate AUROC on initial and tuned model\n",
					"initial_model_test_metric = evaluator_auroc.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_auroc.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved AUROC score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "IJ8r5BtOYInN",
					"outputId": "4e69fb0d-4858-4bbd-9167-597bf9644fce"
				},
				"source": [
					"# Set up RF pipeline: {'maxBins': 32.0, 'maxDepth': 30.0, 'numTrees': 35.0}\n",
					"rf = RandomForestClassifier(labelCol='label',  \n",
					"                            featuresCol='unscaledFeatures',  \n",
					"                            impurity='gini',  \n",
					"                            numTrees=best_numTrees, \n",
					"                            maxDepth=best_maxDepth, \n",
					"                            maxBins=best_maxBins,\n",
					"                            seed=seed_value)\n",
					"\n",
					"search_time_start = time.time()\n",
					"pipeline_rf = Pipeline(stages=[rf])\n",
					"pipelineModel_rf_hyperopt = pipeline_rf.fit(trainDF)\n",
					"print('Time to fit best model:', time.time() - search_time_start)\n",
					"pipelineModel_rf_hyperopt.save('/content/drive/MyDrive/LoanStatus/Python/Models/ML/SparkML/Models/Hyperopt/pipelineModel_rf_hyperopt_us_f1_moreParams')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "J0th1GYOsHsF",
					"outputId": "b1f5fde3-0528-4daa-d2b4-99a3c6dd1fc7"
				},
				"source": [
					"# Predict on test set\n",
					"prediction_rf = pipelineModel_rf_hyperopt.transform(testDF)\n",
					"\n",
					"# AUROC and Test Error\n",
					"rf_auroc = evaluator_auroc.evaluate(prediction_rf)\n",
					"print('Hyperopt: Random Forest')\n",
					"print('Area under ROC curve: %g' % (rf_auroc))\n",
					"print('Test Error: %g ' % (1.0 - rf_auroc))\n",
					"print('Accuracy:', evaluator_acc.evaluate(prediction_rf)) "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "6VYeD86a3Kwn"
				},
				"source": [
					"## Gradient Boosted Trees"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "8_Gc5tHZ3Prv"
				},
				"source": [
					"### AUROC Score"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "t4AzqQK_ZCQy"
				},
				"source": [
					"#### 30 Trials"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "VB5G5qurW429"
				},
				"source": [
					"def train_model(maxDepth, maxBins, maxIter):\n",
					"\n",
					"  \"\"\"\n",
					"   - Input: Hyperparameters for tuning\n",
					"   - Return: AUROC score on the validation set\n",
					"  \"\"\"\n",
					" \n",
					"  # Use MLflow to track with 'nested=True' logged as a child run \n",
					"  with mlflow.start_run(nested=True):\n",
					"\n",
					"    # Define model\n",
					"    gbt = GBTClassifier(labelCol='label',\n",
					"                       featuresCol='unscaledFeatures',\n",
					"                       maxDepth=maxDepth,\n",
					"                       maxBins=maxBins,\n",
					"                       maxIter=maxIter,\n",
					"                       seed=seed_value)\n",
					"\n",
					"    print('\\nTrial Parameters:')\n",
					"    print('maxDepth:', gbt.getMaxDepth())\n",
					"    print('maxBins:', gbt.getMaxBins())\n",
					"    print('maxIter:', gbt.getMaxIter())\n",
					"    \n",
					"    # Create pipeline\n",
					"    pipeline_gbt_hpo = Pipeline(stages=[gbt])\n",
					"\n",
					"    # Define an evaluation metric\n",
					"    evaluator_auroc = BinaryClassificationEvaluator(labelCol='label', \n",
					"                                                    metricName='areaUnderROC')\n",
					"\n",
					"    # Fit model\n",
					"    model = pipeline_gbt_hpo.fit(trainDF)   \n",
					"\n",
					"    # Evaluate the model on the validation dataset\n",
					"    predictions = model.transform(testDF)\n",
					"    validation_metric = evaluator_auroc.evaluate(predictions)\n",
					"\n",
					"    mlflow.log_metric('val_AUROC_score', validation_metric)\n",
					" \n",
					"  return model, validation_metric"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "8hI1wuqEbduz",
					"outputId": "37ebf77f-944f-4294-c54e-d7c9f629031f"
				},
				"source": [
					"# Run initial model\n",
					"search_time_start = time.time()\n",
					"initial_model, val_metric = train_model(maxDepth=5, maxBins=32, maxIter=10)\n",
					"print('Time to fit initial model:', time.time() - search_time_start)\n",
					"print(f'The trained gradient booster tree classifier achieved an AUROC score of {val_metric} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "G-MaATZDW42-"
				},
				"source": [
					"def train_with_hyperopt(params):\n",
					"\n",
					"  \"\"\"\n",
					"  Train method where hyperparameters are passed to hyperopt.fmin()\n",
					"  - Input: Hyperparameters (params) in dictionary\n",
					"  - Return: Dictionary with 'loss' and 'status' (success/failure of run)\n",
					"  \"\"\"\n",
					"\n",
					"  # Convert integer params to int type if searching over continuous values\n",
					"  maxDepth = int(params['maxDepth'])\n",
					"  maxBins = int(params['maxBins'])\n",
					"  maxIter = int(params['maxIter'])\n",
					"\n",
					"  # Train model\n",
					"  model, AUROC_score = train_model(maxDepth, maxBins, maxIter)\n",
					"\n",
					"  # Return a loss to monitor\n",
					"  loss = 1 - AUROC_score\n",
					"  print('Trial loss:', loss)\n",
					"\n",
					"  return {'loss': loss, 'status': STATUS_OK}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "-yviFtYgW42-"
				},
				"source": [
					"# Define parameter space for HPO\n",
					"space = {\n",
					"  'maxDepth': scope.int(hp.quniform('maxDepth', 5, 20, q=1)),\n",
					"  'maxBins': scope.int(hp.quniform('maxBins', 4, 64, q=4)),\n",
					"  'maxIter': scope.int(hp.quniform('maxIter', 5, 20, q=1)),\n",
					"}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "9aMlpfU0W42_",
					"outputId": "a9db166d-be81-4684-948f-f2368f1c6b81",
					"scrolled": true,
					"tags": []
				},
				"source": [
					"# Run HPO\n",
					"algo=tpe.suggest\n",
					"\n",
					"with mlflow.start_run():\n",
					"    \n",
					"  best_params = fmin( \n",
					"      fn=train_with_hyperopt,\n",
					"      space=space,\n",
					"      algo=algo,\n",
					"      max_evals=30\n",
					"  )"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "25qwyq8hW42_",
					"outputId": "037a8f1a-b27f-4d36-bb58-ab2945933309"
				},
				"source": [
					"# Print best params\n",
					"best_params"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "2q0RVQFsW43A"
				},
				"source": [
					"# Define vars to fit best params\n",
					"best_maxDepth = int(best_params['maxDepth'])\n",
					"best_maxBins = int(best_params['maxBins'])\n",
					"best_maxIter = int(best_params['maxIter'])"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "MH1sP_ZsYbB9",
					"outputId": "4a6bb513-4d9e-4623-9790-45cae9631f25"
				},
				"source": [
					"# Fit model with best params\n",
					"final_model, val_AUROC_score = train_model(best_maxDepth, best_maxBins, best_maxIter)\n",
					"print(f'The trained gradient boosted tree classifier achieved an AUROC score of {val_AUROC_score} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "yBHvmznXW43A",
					"outputId": "7e5316ce-7d72-4f8c-e38d-99dbcb64971d"
				},
				"source": [
					"# Evaluate AUROC on initial and tuned model\n",
					"initial_model_test_metric = evaluator_auroc.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_auroc.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved AUROC score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "5a42Vcm1W43B",
					"outputId": "da9903b9-6e2d-4de9-ece9-4518cb78456a"
				},
				"source": [
					"# Evaluate F1 on initial and tuned model\n",
					"initial_model_test_metric = evaluator_f1.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_f1.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved F1 score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.testDF')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "ymwpuz2PZKfw",
					"outputId": "1dd83155-845f-4505-fa4a-ad0a2fddd769"
				},
				"source": [
					"# Set up GBT pipeline: {'maxBins': 28.0, 'maxDepth': 10.0, 'maxIter': 20.0}\n",
					"gbt = GBTClassifier(labelCol='label', \n",
					"                    featuresCol='unscaledFeatures', \n",
					"                    maxDepth=best_maxDepth, \n",
					"                    maxBins=best_maxBins, \n",
					"                    maxIter=best_maxIter,\n",
					"                    seed=seed_value)\n",
					"\n",
					"search_time_start = time.time()\n",
					"pipeline_gbt = Pipeline(stages=[gbt])\n",
					"pipelineModel_gbt_hyperopt = pipeline_gbt.fit(trainDF)\n",
					"print('Time to fit best model:', time.time() - search_time_start)\n",
					"pipelineModel_gbt_hyperopt.save('/content/drive/MyDrive/LoanStatus/Python/Models/ML/SparkML/Models/Hyperopt/pipelineModel_gbt_hyperopt_us_auroc')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "4XQ2XsKxzIRl",
					"outputId": "c8eaa626-bf88-43d5-c325-4daaab441f54"
				},
				"source": [
					"# Predict and find AUROC, test error and accuracy\n",
					"prediction_gbt = pipelineModel_gbt_hyperopt.transform(testDF) \n",
					"\n",
					"gbt_auroc = evaluator_auroc.evaluate(prediction_gbt)\n",
					"print('Hyperopt: Gradient Boosted Trees')\n",
					"print('Area under ROC curve: %g' % (gbt_auroc))\n",
					"print('Test Error: %g ' % (1.0 - gbt_auroc))\n",
					"print('Accuracy:', evaluator_acc.evaluate(prediction_gbt)) "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "2Ntm1kpw3fV-"
				},
				"source": [
					"### F1 Score"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "cZIChqw7UgqY"
				},
				"source": [
					"#### 30 Trials"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "Rh3VRPX7UFUH"
				},
				"source": [
					"def train_model(maxDepth, maxBins, maxIter):\n",
					"\n",
					"  \"\"\"\n",
					"   - Input: Hyperparameters for tuning\n",
					"   - Return: F1 score on the validation set\n",
					"  \"\"\"\n",
					"\n",
					"  # Use MLflow to track with 'nested=True' logged as a child run \n",
					"  with mlflow.start_run(nested=True):\n",
					"\n",
					"    # Define model\n",
					"    gbt = GBTClassifier(labelCol='label', \n",
					"                        featuresCol='unscaledFeatures',\n",
					"                        maxDepth=maxDepth,\n",
					"                        maxBins=maxBins,\n",
					"                        maxIter=maxIter,\n",
					"                        seed=seed_value)\n",
					"\n",
					"    print('\\nTrial Parameters:')\n",
					"    print('maxDepth:', gbt.getMaxDepth())\n",
					"    print('maxBins:', gbt.getMaxBins())\n",
					"    print('maxIter:', gbt.getMaxIter())\n",
					"    \n",
					"    # Create pipeline\n",
					"    pipeline_gbt_hpo = Pipeline(stages=[gbt])\n",
					"\n",
					"    # Define an evaluation metric\n",
					"    evaluator_f1 = MulticlassClassificationEvaluator(labelCol='label', \n",
					"                                                     metricName='f1')\n",
					"    # Fit model\n",
					"    model = pipeline_gbt_hpo.fit(trainDF)   \n",
					"\n",
					"    # Evaluate the model on the validation dataset\n",
					"    predictions = model.transform(testDF)\n",
					"    validation_metric = evaluator_f1.evaluate(predictions)\n",
					"\n",
					"    mlflow.log_metric('val_f1_score', validation_metric)\n",
					" \n",
					"  return model, validation_metric"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "Gad8uVueUFUH",
					"outputId": "ff6a329a-1d0d-47d0-ed5d-73e2a25e97cc"
				},
				"source": [
					"# Run initial model\n",
					"search_time_start = time.time()\n",
					"initial_model, val_metric = train_model(maxDepth=5, maxBins=32, maxIter=10)\n",
					"print('Time to fit initial model:', time.time() - search_time_start)\n",
					"print(f'The trained gradient booster tree classifier achieved an F1 score of {val_metric} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "Lpc3fCBpUFUI"
				},
				"source": [
					"def train_with_hyperopt(params):\n",
					"\n",
					"  \"\"\"\n",
					"  Train method where hyperparameters are passed to hyperopt.fmin()\n",
					"  - Input: Hyperparameters (params) in dictionary\n",
					"  - Return: Dictionary with 'loss' and 'status' (success/failure of run)\n",
					"  \"\"\"\n",
					"\n",
					"  # Convert integer params to int type if searching over continuous values\n",
					"  maxDepth = int(params['maxDepth'])\n",
					"  maxBins = int(params['maxBins'])\n",
					"  maxIter = int(params['maxIter'])\n",
					"\n",
					"  # Train model\n",
					"  model, f1_score = train_model(maxDepth, maxBins, maxIter)\n",
					"\n",
					"  # Return a loss to monitor\n",
					"  loss = 1 - f1_score\n",
					"  print('Trial loss:', loss)\n",
					"\n",
					"  return {'loss': loss, 'status': STATUS_OK}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "_i2GMyzmUFUI"
				},
				"source": [
					"# Define parameter space for HPO\n",
					"space = {\n",
					"  'maxDepth': scope.int(hp.quniform('maxDepth', 5, 20, q=1)),\n",
					"  'maxBins': scope.int(hp.quniform('maxBins', 4, 64, q=4)),\n",
					"  'maxIter': scope.int(hp.quniform('maxIter', 5, 20, q=1)),\n",
					"}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "nKWoC-4uUFUJ",
					"outputId": "dba87eba-6df7-43e6-d4d8-8afd0a6a179a",
					"scrolled": true,
					"tags": []
				},
				"source": [
					"# Run HPO\n",
					"algo=tpe.suggest\n",
					"\n",
					"with mlflow.start_run():\n",
					"    \n",
					"  best_params = fmin( \n",
					"      fn=train_with_hyperopt,\n",
					"      space=space,\n",
					"      algo=algo,\n",
					"      max_evals=30\n",
					"  )"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "InWFA0x-a4gk",
					"outputId": "59a2cd5a-99d8-44d6-9a99-76f296adb803"
				},
				"source": [
					"# Print best params\n",
					"best_params"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "WIVgBoGjUFUO"
				},
				"source": [
					"# Define vars to fit best params\n",
					"best_maxDepth = int(best_params['maxDepth'])\n",
					"best_maxBins = int(best_params['maxBins'])\n",
					"best_maxIter = int(best_params['maxIter'])"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "agz3rYVaor21",
					"outputId": "60f5a2f0-7697-4d93-c18a-a42e1487f630"
				},
				"source": [
					"# Fit model with best params\n",
					"final_model, val_f1_score = train_model(best_maxDepth, best_maxBins, \n",
					"                                        best_maxIter)\n",
					"print(f'The trained gradient booster tree classifier achieved an F1 score of {val_f1_score} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "RToaOu32UFUQ",
					"outputId": "e95e8b1c-f92c-4e3b-b3cb-36f5a6d39725"
				},
				"source": [
					"# Evaluate F1 on initial and tuned model\n",
					"initial_model_test_metric = evaluator_f1.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_f1.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved F1 score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.testDF')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "rZJjIwzCUFUQ",
					"outputId": "79cd3a87-36c4-4287-8c75-e5415c4fe7c7"
				},
				"source": [
					"# Evaluate AUROC on initial and tuned model\n",
					"initial_model_test_metric = evaluator_auroc.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_auroc.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved AUROC score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "TgMeClUKZbmm",
					"outputId": "d8e8e551-51ae-4d33-f676-de534e0de534"
				},
				"source": [
					"# Set up GBT pipeline: {'maxDepth': 15.0, 'maxBins': 44.0, 'maxIter': 20.0}\n",
					"gbt = GBTClassifier(labelCol='label', \n",
					"                    featuresCol='unscaledFeatures', \n",
					"                    maxDepth=best_maxDepth, \n",
					"                    maxBins=best_maxBins, \n",
					"                    maxIter=best_maxIter,\n",
					"                    seed=seed_value)\n",
					"\n",
					"search_time_start = time.time()\n",
					"pipeline_gbt = Pipeline(stages=[gbt])\n",
					"pipelineModel_gbt_hyperopt = pipeline_gbt.fit(trainDF)\n",
					"print('Time to fit best model:', time.time() - search_time_start)\n",
					"pipelineModel_gbt_hyperopt.save('/content/drive/MyDrive/LoanStatus/Python/Models/ML/SparkML/Models/Hyperopt/pipelineModel_gbt_hyperopt_us_f1')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "6ApT1hDVzJIG",
					"outputId": "866f6302-6bdf-42ba-892f-451933bded8f"
				},
				"source": [
					"# Predict and find AUROC, test error and accuracy\n",
					"prediction_gbt = pipelineModel_gbt_hyperopt.transform(testDF) \n",
					"\n",
					"gbt_auroc = evaluator_auroc.evaluate(prediction_gbt)\n",
					"print('Hyperopt: Gradient Boosted Trees')\n",
					"print('Area under ROC curve: %g' % (gbt_auroc))\n",
					"print('Test Error: %g ' % (1.0 - gbt_auroc))\n",
					"print('Accuracy:', evaluator_acc.evaluate(prediction_gbt)) "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "d7BLrYd9duGt"
				},
				"source": [
					"# SMOTE - Split Over Upsampling "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "XgBCB2Wxd4uD"
				},
				"source": [
					"## Read Data and View Schema"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "wo_0dFqHN1Ym",
					"outputId": "581d9f89-6566-40da-acd3-03378629da3a",
					"scrolled": true,
					"tags": []
				},
				"source": [
					"trainDF = spark.read.csv('/content/drive/MyDrive/LoanStatus/Data/trainDF_SMOTE.csv',\n",
					"                         header=True, inferSchema=True).cache()\n",
					"trainDF = trainDF \\\n",
					"  .withColumn('loan_amnt', trainDF['loan_amnt'].cast(IntegerType())) \\\n",
					"  .withColumn('revol_bal', trainDF['revol_bal'].cast(IntegerType())) \\\n",
					"  .withColumn('term_ 60 months', trainDF['term_ 60 months'].cast(IntegerType())) \\\n",
					"  .withColumn('grade_B', trainDF['grade_B'].cast(IntegerType())) \\\n",
					"  .withColumn('grade_C', trainDF['grade_C'].cast(IntegerType())) \\\n",
					"  .withColumn('grade_D', trainDF['grade_D'].cast(IntegerType())) \\\n",
					"  .withColumn('home_ownership_MORTGAGE', trainDF['home_ownership_MORTGAGE'].cast(IntegerType())) \\\n",
					"  .withColumn('home_ownership_OWN', trainDF['home_ownership_OWN'].cast(IntegerType())) \\\n",
					"  .withColumn('home_ownership_RENT', trainDF['home_ownership_RENT'].cast(IntegerType())) \\\n",
					"  .withColumn('verification_status_Source Verified', trainDF['verification_status_Source Verified'].cast(IntegerType())) \\\n",
					"  .withColumn('verification_status_Verified', trainDF['verification_status_Verified'].cast(IntegerType())) \\\n",
					"  .withColumn('purpose_credit_card', trainDF['purpose_credit_card'].cast(IntegerType())) \\\n",
					"  .withColumn('initial_list_status_w', trainDF['initial_list_status_w'].cast(IntegerType())) \\\n",
					"  .withColumn('application_type_Joint App', trainDF['application_type_Joint App'].cast(IntegerType())) \\\n",
					"  .withColumn('disbursement_method_DirectPay', trainDF['disbursement_method_DirectPay'].cast(IntegerType())) \n",
					"print('\\nTrain Schema')\n",
					"trainDF.printSchema()\n",
					"\n",
					"testDF = spark.read.csv('/content/drive/MyDrive/LoanStatus/Data/testDF_SMOTE.csv',\n",
					"                        header=True, inferSchema=True).cache()\n",
					"print('\\nTest Schema')\n",
					"testDF.printSchema()"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "IbInT5E5SIuk"
				},
				"source": [
					"## Set up Vector Assembler"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "g2XHymcqV05p"
				},
				"source": [
					"# Define features and label for train data\n",
					"features = trainDF.columns[0: len(trainDF.columns) - 1]\n",
					"trainDF = trainDF.select(col('loan_status').alias('label'), *features)\n",
					"\n",
					"# Transform train data\n",
					"trainDF = vecAssembler.transform(trainDF)  "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "7bJpMRdpV05t"
				},
				"source": [
					"# Define features and label for test data \n",
					"features = testDF.columns[0: len(testDF.columns) - 1]\n",
					"testDF = testDF.select(col('loan_status').alias('label'), *features)\n",
					"\n",
					"# Transform test data\n",
					"testDF = vecAssembler.transform(testDF)  "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "s6ZJnbUT1eev",
					"outputId": "aadc757b-b242-43d1-ea60-082936274594"
				},
				"source": [
					"# Change directory to write mlruns\n",
					"%cd /content/drive/MyDrive/LoanStatus/Python/Models/ML/SparkML/Models/Hyperopt/"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "3D7k7759pwKP"
				},
				"source": [
					"## Logistic Regression"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "mxf09C5dpyG4"
				},
				"source": [
					"### AUROC Score"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "6xgkVCy8p6P1"
				},
				"source": [
					"#### 100 Trials"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "hF7KRdpPIK6h"
				},
				"source": [
					"def train_model(regParam, elasticNetParam): \n",
					"  \n",
					"  \"\"\"\n",
					"   - Input: Hyperparameters for tuning\n",
					"   - Return: AUROC score on the validation set\n",
					"  \"\"\"\n",
					" \n",
					"  # Use MLflow to track with 'nested=True' logged as a child run\n",
					"  with mlflow.start_run(nested=True):\n",
					"\n",
					"    # MinMaxScaler\n",
					"    mmScaler = MinMaxScaler(inputCol='unscaledFeatures', \n",
					"                            outputCol='scaledFeatures',\n",
					"                            min=0, max=1)\n",
					"    \n",
					"    # Define model\n",
					"    lr = LogisticRegression(labelCol='label', \n",
					"                            featuresCol='scaledFeatures',\n",
					"                            family='binomial',                             \n",
					"                            regParam=regParam,\n",
					"                            elasticNetParam=elasticNetParam,\n",
					"                            standardization=True)\n",
					"    \n",
					"    print('\\nTrial Parameters:')\n",
					"    print('regParam:', lr.getRegParam())\n",
					"    print('ElasticNet:', lr.getElasticNetParam())\n",
					"    print('maxIter:', lr.getMaxIter())\n",
					"\n",
					"    # Create pipeline\n",
					"    pipeline_lr_hpo = Pipeline(stages=[mmScaler, lr])\n",
					"    \n",
					"    # Define an evaluation metric\n",
					"    evaluator_auroc = BinaryClassificationEvaluator(labelCol='label', \n",
					"                                                    metricName='areaUnderROC')\n",
					"\n",
					"    # Fit model\n",
					"    model = pipeline_lr_hpo.fit(trainDF)   \n",
					"    \n",
					"    # Evaluate the model on the validation dataset\n",
					"    predictions = model.transform(testDF)\n",
					"    validation_metric = evaluator_auroc.evaluate(predictions)\n",
					"\n",
					"    mlflow.log_metric('val_AUROC_score', validation_metric)\n",
					" \n",
					"  return model, validation_metric"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "8pbpw5QIIK6j",
					"outputId": "a2bdda7b-644f-4dbe-ab99-c4a6e0337b9e"
				},
				"source": [
					"# Run initial model\n",
					"initial_model, val_metric = train_model(regParam=0.0, elasticNetParam=0.0)\n",
					"print(f'The trained logistic regression achieved an AUROC score of {val_metric} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "Ka8nHLgAIK6k"
				},
				"source": [
					"def train_with_hyperopt(params):\n",
					"\n",
					"  \"\"\"\n",
					"  Train method where hyperparameters are passed to hyperopt.fmin()\n",
					"  - Input: Hyperparameters (params) in dictionary\n",
					"  - Return: Dictionary with 'loss' and 'status' (success/failure of run)\n",
					"  \"\"\"\n",
					"\n",
					"  # Convert integer params to int type if searching over continuous values\n",
					"  regParam = params['regParam']\n",
					"  elasticNetParam = params['elasticNetParam']\n",
					"\n",
					"  # Train model\n",
					"  model, f1_score = train_model(regParam, elasticNetParam)\n",
					"\n",
					"  # Return a loss to monitor\n",
					"  loss = 1 - f1_score\n",
					"  print('Trial loss:', loss)\n",
					"  \n",
					"  return {'loss': loss, 'status': STATUS_OK}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "p-yY8LjdIK6l"
				},
				"source": [
					"# Define parameter space for HPO\n",
					"space = {\n",
					"  'regParam': hp.quniform('regParam',  0, 1, q=0.01),\n",
					"  'elasticNetParam': hp.quniform('elasticNetParam', 0, 1, q=0.01)\n",
					"}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "BT5EBnggIK6m",
					"outputId": "04193fc1-db18-4abc-a5c8-4a56d9b3d8d0",
					"scrolled": true,
					"tags": []
				},
				"source": [
					"# Run HPO\n",
					"algo=tpe.suggest\n",
					"\n",
					"with mlflow.start_run():\n",
					"    \n",
					"  best_params = fmin( \n",
					"      fn=train_with_hyperopt,\n",
					"      space=space,\n",
					"      algo=tpe.suggest,\n",
					"      max_evals=100\n",
					"  )"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "E7WEzSTiIK6o",
					"outputId": "83bbfb18-0563-4122-f5e6-65c7ca757d5b"
				},
				"source": [
					"# Print best params\n",
					"best_params"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "bW8ZIYuDIK6p"
				},
				"source": [
					"# Define vars to fit best params\n",
					"best_elasticNetParam = best_params['elasticNetParam']\n",
					"best_regParam = best_params['regParam']"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "h-Y-F-B6IK6r",
					"outputId": "8a86a710-8393-4d2e-9d23-4504b17c773b"
				},
				"source": [
					"# Fit model with best params\n",
					"final_model, val_AUROC_score = train_model(best_elasticNetParam, best_regParam) \n",
					"print(f'The trained logistic regression achieved an AUROC score of {val_AUROC_score} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "1U23rUr4trkS",
					"outputId": "c247c121-1576-4dc5-9ed6-cc8fb3c5eca8"
				},
				"source": [
					"# Evaluate AUROC on initial and tuned model\n",
					"initial_model_test_metric = evaluator_auroc.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_auroc.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved AUROC score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "7B5PvBnfIK6r",
					"outputId": "0a047053-fbfd-4436-eda0-bcd70eb5ab94"
				},
				"source": [
					"# Evaluate F1 score on initial and tuned model\n",
					"initial_model_test_metric = evaluator_f1.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_f1.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved F1 score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "-PUtmY9NtGJc",
					"outputId": "e6602e0c-fc50-497f-9273-078cb9db42bb"
				},
				"source": [
					"# Set up logistic regression pipeline: \n",
					"lr = LogisticRegression(labelCol='label', \n",
					"                        featuresCol='scaledFeatures', \n",
					"                        family='binomial', \n",
					"                        maxIter=100, \n",
					"                        regParam=0.0, \n",
					"                        elasticNetParam=0.0)\n",
					"\n",
					"pipeline_lr = Pipeline(stages=[mmScaler, lr])\n",
					"search_time_start = time.time()\n",
					"pipelineModel_lr_hyperopt = pipeline_lr.fit(trainDF)\n",
					"print('Time to fit best model:', time.time() - search_time_start)\n",
					"pipelineModel_lr_hyperopt.save('/content/drive/MyDrive/LoanStatus/Python/Models/ML/SparkML/Models/Hyperopt/pipelineModel_lr_hyperopt_smote_auroc_100trials')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "O2W76Py7m77T",
					"outputId": "6e0fc7db-cf8e-4545-8442-cf501f92bf24"
				},
				"source": [
					"# Predict and find AUROC, test error and accuracy\n",
					"prediction_lr = pipelineModel_lr_hyperopt.transform(testDF) \n",
					"\n",
					"lr_auroc = evaluator_auroc.evaluate(prediction_lr)\n",
					"print('Hyperopt: Logistic Regression')\n",
					"print('Area under ROC curve: %g' % (lr_auroc))\n",
					"print('Test Error: %g ' % (1.0 - lr_auroc))\n",
					"print('Accuracy:', evaluator_acc.evaluate(prediction_lr)) "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "T4Otd0K2qCHK"
				},
				"source": [
					"### F1 Score"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "vo-Nsl1BqHMG"
				},
				"source": [
					"#### 100 Trials"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "oDJn5QOF7i4e"
				},
				"source": [
					"def train_model(regParam, elasticNetParam): \n",
					"  \n",
					"  \"\"\"\n",
					"   - Input: Hyperparameters for tuning\n",
					"   - Return: F1 score on the validation set\n",
					"  \"\"\"\n",
					"\n",
					"  # Use MLflow to track with 'nested=True' logged as a child run \n",
					"  with mlflow.start_run(nested=True):\n",
					"\n",
					"    # MinMaxScaler\n",
					"    mmScaler = MinMaxScaler(inputCol='unscaledFeatures', \n",
					"                            outputCol='scaledFeatures',\n",
					"                            min=0, max=1)\n",
					"    \n",
					"    # Define model\n",
					"    lr = LogisticRegression(labelCol='label', \n",
					"                            featuresCol='scaledFeatures',\n",
					"                            family='binomial',                             \n",
					"                            regParam=regParam,\n",
					"                            elasticNetParam=elasticNetParam,\n",
					"                            standardization=True)\n",
					"    \n",
					"    print('\\nTrial Parameters:')\n",
					"    print('regParam:', lr.getRegParam())\n",
					"    print('ElasticNet:', lr.getElasticNetParam())\n",
					"    print('maxIter:', lr.getMaxIter())\n",
					"\n",
					"    # Create pipeline\n",
					"    pipeline_lr_hpo = Pipeline(stages=[mmScaler, lr])\n",
					"    \n",
					"    # Define an evaluation metric\n",
					"    evaluator_f1 = MulticlassClassificationEvaluator(labelCol='label', \n",
					"                                                     metricName='f1')\n",
					"\n",
					"    # Fit model\n",
					"    model = pipeline_lr_hpo.fit(trainDF)   \n",
					"    \n",
					"    # Evaluate the model on the validation dataset\n",
					"    predictions = model.transform(testDF)\n",
					"    validation_metric = evaluator_f1.evaluate(predictions)\n",
					"\n",
					"    mlflow.log_metric('val_f1_score', validation_metric)\n",
					" \n",
					"  return model, validation_metric"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "OQ3K0mTc7i4h",
					"outputId": "68a3f6ea-4840-4b43-a28b-9d5435b39be1"
				},
				"source": [
					"# Run initial model\n",
					"initial_model, val_metric = train_model(regParam=0.0, elasticNetParam=0.0)\n",
					"print(f'The trained logistic regression achieved an F1 score of {val_metric} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "fdGNHfkf7i4j"
				},
				"source": [
					"def train_with_hyperopt(params):\n",
					"\n",
					"  \"\"\"\n",
					"  Train method where hyperparameters are passed to hyperopt.fmin()\n",
					"  - Input: Hyperparameters (params) in dictionary\n",
					"  - Return: Dictionary with 'loss' and 'status' (success/failure of run)\n",
					"  \"\"\"\n",
					"\n",
					"  # Convert integer params to int type if searching over continuous values\n",
					"  regParam = params['regParam']\n",
					"  elasticNetParam = params['elasticNetParam']\n",
					"\n",
					"  # Train model\n",
					"  model, f1_score = train_model(regParam, elasticNetParam)\n",
					"\n",
					"  # Return a loss to monitor\n",
					"  loss = 1 - f1_score\n",
					"  print('Trial loss:', loss)\n",
					"  \n",
					"  return {'loss': loss, 'status': STATUS_OK}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "3uMMln2E7i4l"
				},
				"source": [
					"# Define parameter space for HPO\n",
					"space = {\n",
					"  'regParam': hp.quniform('regParam',  0, 1, q=0.01),\n",
					"  'elasticNetParam': hp.quniform('elasticNetParam', 0, 1, q=0.01)\n",
					"}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "-0pOGcRO7i4m",
					"outputId": "d168e6d2-e1d9-4cda-bee9-20db65bdbbe4",
					"scrolled": true,
					"tags": []
				},
				"source": [
					"# Run HPO\n",
					"algo=tpe.suggest\n",
					"\n",
					"with mlflow.start_run():\n",
					"    \n",
					"  best_params = fmin( \n",
					"      fn=train_with_hyperopt,\n",
					"      space=space,\n",
					"      algo=tpe.suggest,\n",
					"      max_evals=100\n",
					"  )"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "Y_MS_-1G7i4n",
					"outputId": "fc96e807-6e79-4471-dabd-ffb4ed638d9a"
				},
				"source": [
					"# Print best params\n",
					"best_params"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "WYfVnlg37i4o"
				},
				"source": [
					"# Define vars to fit best params\n",
					"best_elasticNetParam = best_params['elasticNetParam']\n",
					"best_regParam = best_params['regParam']"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "imr4pOKg7i4p",
					"outputId": "2560466f-a2e4-4571-8842-9b9f5a3d12c7"
				},
				"source": [
					"# Fit model with best params\n",
					"final_model, val_f1_score = train_model(best_elasticNetParam, best_regParam) \n",
					"print(f'The trained logistic regression achieved an F1 score of {val_f1_score} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "JfVd3OvW7i4q",
					"outputId": "b824f9d3-493a-4b5a-adf3-d7cbd8cb38bf"
				},
				"source": [
					"# Evaluate F1 score on initial and tuned model\n",
					"initial_model_test_metric = evaluator_f1.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_f1.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved F1 score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "lq6klNMm7i42",
					"outputId": "402a1824-1af1-40da-a6ce-1b40c0cd1f85"
				},
				"source": [
					"# Evaluate AUROC on initial and tuned model\n",
					"initial_model_test_metric = evaluator_auroc.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_auroc.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved AUROC score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "jDh_3Nuk7i41",
					"outputId": "daacb81a-0737-452b-ac75-452933ca0420"
				},
				"source": [
					"# Set up logistic regression pipeline\n",
					"lr = LogisticRegression(labelCol='label', \n",
					"                        featuresCol='scaledFeatures', \n",
					"                        family='binomial', \n",
					"                        maxIter=100, \n",
					"                        regParam=0.0, \n",
					"                        elasticNetParam=0.0)\n",
					"\n",
					"pipeline_lr = Pipeline(stages=[mmScaler, lr])\n",
					"search_time_start = time.time()\n",
					"pipelineModel_lr_hyperopt = pipeline_lr.fit(trainDF)\n",
					"print('Time to fit best model:', time.time() - search_time_start)\n",
					"pipelineModel_lr_hyperopt.save('/content/drive/MyDrive/LoanStatus/Python/Models/ML/SparkML/Models/Hyperopt/pipelineModel_lr_hyperopt_smote_f1_100trials')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "DdpFDMwem-to",
					"outputId": "9a0a8325-fbaf-421d-8347-7e5c36c979b1"
				},
				"source": [
					"# Predict and find AUROC, test error and accuracy\n",
					"prediction_lr = pipelineModel_lr_hyperopt.transform(testDF) \n",
					"\n",
					"lr_auroc = evaluator_auroc.evaluate(prediction_lr)\n",
					"print('Hyperopt: Logistic Regression')\n",
					"print('Area under ROC curve: %g' % (lr_auroc))\n",
					"print('Test Error: %g ' % (1.0 - lr_auroc))\n",
					"print('Accuracy:', evaluator_acc.evaluate(prediction_lr)) "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "OErR8p-qqVXQ"
				},
				"source": [
					"## LinearSVC"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "colING3lqZ1S"
				},
				"source": [
					"### AUROC Score"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "ilar0PkKJey4"
				},
				"source": [
					"#### 100 Trials"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "sbef75mcj3Hi"
				},
				"source": [
					"def train_model(regParam, tol, maxIter):\n",
					"  \n",
					"  \"\"\"\n",
					"   - Input: Hyperparameters for tuning\n",
					"   - Return: AUROC score on the validation set\n",
					"  \"\"\"\n",
					" \n",
					"  # Use MLflow to track with 'nested=True' logged as a child run \n",
					"  with mlflow.start_run(nested=True):\n",
					"\n",
					"    # Standard scaler\n",
					"    stdScaler = StandardScaler(inputCol='unscaledFeatures', \n",
					"                               outputCol='scaledFeatures', \n",
					"                               withStd=True, \n",
					"                               withMean=False)\n",
					"    \n",
					"    # Define model\n",
					"    lsvc = LinearSVC(labelCol='label', \n",
					"                     featuresCol='scaledFeatures',\n",
					"                     regParam=regParam,\n",
					"                     tol=tol,\n",
					"                     maxIter=maxIter)\n",
					"\n",
					"    print('\\nTrial Parameters:')\n",
					"    print('regParam:', lsvc.getRegParam())\n",
					"    print('tol:', lsvc.getTol())\n",
					"    print('maxIter:', lsvc.getMaxIter())\n",
					"\n",
					"    # Create pipeline\n",
					"    pipeline_lsvc_hpo = Pipeline(stages=[stdScaler, lsvc])\n",
					"\n",
					"    # Define an evaluation metric\n",
					"    evaluator_auroc = BinaryClassificationEvaluator(labelCol='label', \n",
					"                                                    metricName='areaUnderROC')\n",
					"\n",
					"    # Fit model\n",
					"    model = pipeline_lsvc_hpo.fit(trainDF)   \n",
					"\n",
					"    # Evaluate the model on the validation dataset\n",
					"    predictions = model.transform(testDF)\n",
					"    validation_metric = evaluator_auroc.evaluate(predictions)\n",
					"\n",
					"    mlflow.log_metric('val_AUROC_score', validation_metric)\n",
					" \n",
					"  return model, validation_metric"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "QJ6vgwrhj3Hi",
					"outputId": "e31d7e8a-3feb-472d-98d7-7920b4ec8ccb"
				},
				"source": [
					"# Run initial model\n",
					"initial_model, val_metric = train_model(regParam=0.0, tol=1e-5, maxIter=100)\n",
					"print(f'The trained LinearSVC achieved an AUROC score of {val_metric} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "eizGwpE3j3Hj"
				},
				"source": [
					"def train_with_hyperopt(params):\n",
					"  \n",
					"  \"\"\"\n",
					"  Train method where hyperparameters are passed to hyperopt.fmin()\n",
					"  - Input: Hyperparameters (params) in dictionary\n",
					"  - Return: Dictionary with 'loss' and 'status' (success/failure of run)\n",
					"  \"\"\"\n",
					"\n",
					"  # Convert integer params to int type if searching over continuous values\n",
					"  regParam = params['regParam']\n",
					"  tol = params['tol']\n",
					"  maxIter = int(params['maxIter'])\n",
					"\n",
					"  # Train model\n",
					"  model, AUROC_score = train_model(regParam, tol, maxIter)\n",
					"\n",
					"  # Return a loss to monitor\n",
					"  loss = 1 - AUROC_score\n",
					"  print('Trial loss:', loss)\n",
					"\n",
					"  return {'loss': loss, 'status': STATUS_OK}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "h2KqEVP7j3Hj"
				},
				"source": [
					"# Define parameter space for HPO\n",
					"space = {\n",
					"  'regParam': hp.quniform('regParam',  0, 1, q=0.01),\n",
					"  'tol': hp.quniform('tol', 0, 1e-3, q=5e-8),\n",
					"  'maxIter': scope.int(hp.quniform('maxIter', 100, 1000, q=100))\n",
					"}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "aaOvGdebj3Hk",
					"outputId": "0dfddf5e-9b81-4181-a591-1130a933e209",
					"scrolled": true,
					"tags": []
				},
				"source": [
					"# Run HPO\n",
					"algo=tpe.suggest\n",
					"\n",
					"with mlflow.start_run():\n",
					"    \n",
					"  best_params = fmin( \n",
					"      fn=train_with_hyperopt,\n",
					"      space=space,\n",
					"      algo=algo,\n",
					"      max_evals=100\n",
					"  )"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "X7i4eL6yj3Hk",
					"outputId": "ca84af97-9bea-44ae-8624-84e39070942c"
				},
				"source": [
					"# Print best params\n",
					"best_params"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "zEBxHmfej3Hl"
				},
				"source": [
					"# Define vars to fit best params\n",
					"best_regParam = best_params['regParam']\n",
					"best_tol = best_params['tol']\n",
					"best_maxIter = int(best_params['maxIter'])"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "PXHci-q2j3Hl",
					"outputId": "67589bea-aa8e-45bc-aea2-ac35557b11c9"
				},
				"source": [
					"# Fit model with best params\n",
					"final_model, val_auroc_score = train_model(best_regParam, best_tol, best_maxIter)\n",
					"print(f'The trained LinearSVC achieved an AUROC score of {val_auroc_score} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "zjHNYzOrj3Hm",
					"outputId": "5c586ac1-094d-4563-89f1-8cfa81a16e9a"
				},
				"source": [
					"# Evaluate AUROC on initial and tuned model\n",
					"initial_model_test_metric = evaluator_auroc.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_auroc.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved AUROC score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "-bD4nYqDj3Hn",
					"outputId": "47da6189-59bc-4bf2-fa20-6cae39574200"
				},
				"source": [
					"# Evaluate F1 on initial and tuned model\n",
					"initial_model_test_metric = evaluator_f1.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_f1.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved F1 score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "6Dv4xiuhmg7L",
					"outputId": "5bda1849-4030-4f77-9ef2-f37473a2a5f0"
				},
				"source": [
					"# Set up LinearSVC pipeline: {'maxIter': 500.0, 'regParam': 0.0, 'tol': 0.0009712999999999999}\n",
					"lsvc = LinearSVC(labelCol='label',\n",
					"                 featuresCol='scaledFeatures',\n",
					"                 regParam=best_regParam,\n",
					"                 tol=best_tol,\n",
					"                 maxIter=best_maxIter)\n",
					"\n",
					"pipeline_lsvc = Pipeline(stages=[stdScaler, lsvc])\n",
					"search_time_start = time.time()\n",
					"pipelineModel_lsvc_hyperopt = pipeline_lsvc.fit(trainDF)\n",
					"print('Time to fit best model:', time.time() - search_time_start)\n",
					"pipelineModel_lsvc_hyperopt.save('/content/drive/MyDrive/LoanStatus/Python/Models/ML/SparkML/Models/Hyperopt/pipelineModel_lsvc_hyperopt_smote_auroc')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "htEASuPszlwy",
					"outputId": "2a5ba03d-f4a4-4114-95ab-e3c1b8d3055a"
				},
				"source": [
					"# Predict and find AUROC, test error and accuracy\n",
					"prediction_lsvc = pipelineModel_lsvc_hyperopt.transform(testDF) \n",
					"\n",
					"lsvc_auroc = evaluator_auroc.evaluate(prediction_lsvc)\n",
					"print('Hyperopt: LinearSVC')\n",
					"print('Area under ROC curve: %g' % (lsvc_auroc))\n",
					"print('Test Error: %g' % (1.0 - lsvc_auroc))\n",
					"print('Accuracy:', evaluator_acc.evaluate(prediction_lsvc)) "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "jgYkEZQb7FIu"
				},
				"source": [
					"### F1 Score"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "MRhA_NN57K2s"
				},
				"source": [
					"#### 100 Trials"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "upLCiAMUraWd"
				},
				"source": [
					"def train_model(regParam, tol, maxIter):\n",
					"  \n",
					"  \"\"\"\n",
					"   - Input: Hyperparameters for tuning\n",
					"   - Return: F1 score on the validation set\n",
					"  \"\"\"\n",
					"\n",
					"  # Use MLflow to track with 'nested=True' logged as a child run \n",
					"  with mlflow.start_run(nested=True):\n",
					"\n",
					"    # Standard scaler\n",
					"    stdScaler = StandardScaler(inputCol='unscaledFeatures', \n",
					"                               outputCol='scaledFeatures', \n",
					"                               withStd=True, \n",
					"                               withMean=False)\n",
					"    \n",
					"    # Define model\n",
					"    lsvc = LinearSVC(labelCol='label', \n",
					"                     featuresCol='scaledFeatures',\n",
					"                     regParam=regParam,\n",
					"                     tol=tol,\n",
					"                     maxIter=maxIter)\n",
					"\n",
					"    print('\\nTrial Parameters:')\n",
					"    print('regParam:', lsvc.getRegParam())\n",
					"    print('tol:', lsvc.getTol())\n",
					"    print('maxIter:', lsvc.getMaxIter())\n",
					"\n",
					"    # Create pipeline\n",
					"    pipeline_lsvc_hpo = Pipeline(stages=[stdScaler, lsvc])\n",
					"\n",
					"    # Define an evaluation metric\n",
					"    evaluator_f1 = MulticlassClassificationEvaluator(labelCol='label', \n",
					"                                                     metricName='f1')\n",
					"    # Fit model\n",
					"    model = pipeline_lsvc_hpo.fit(trainDF)   \n",
					"\n",
					"    # Evaluate the model on the validation dataset\n",
					"    predictions = model.transform(testDF)\n",
					"    validation_metric = evaluator_f1.evaluate(predictions)\n",
					"\n",
					"    mlflow.log_metric('val_f1_score', validation_metric)\n",
					" \n",
					"  return model, validation_metric"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "LjiusvCpraWd",
					"outputId": "1ba09b73-0b3b-4f35-a700-33a2af010546"
				},
				"source": [
					"# Run initial model\n",
					"initial_model, val_metric = train_model(regParam=0.0, tol=1e-5, maxIter=100)\n",
					"print(f'The trained LinearSVC achieved an F1 score of {val_metric} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "FxBy_thlraWf"
				},
				"source": [
					"def train_with_hyperopt(params):\n",
					"  \n",
					"  \"\"\"\n",
					"  Train method where hyperparameters are passed to hyperopt.fmin()\n",
					"  - Input: Hyperparameters (params) in dictionary\n",
					"  - Return: Dictionary with 'loss' and 'status' (success/failure of run)\n",
					"  \"\"\"\n",
					"\n",
					"  # Convert integer params to int type if searching over continuous values\n",
					"  regParam = params['regParam']\n",
					"  tol = params['tol']\n",
					"  maxIter = int(params['maxIter'])\n",
					"\n",
					"  # Train model\n",
					"  model, f1_score = train_model(regParam, tol, maxIter)\n",
					"\n",
					"  # Return a loss to monitor\n",
					"  loss = 1 - f1_score\n",
					"  print('Trial loss:', loss)\n",
					"\n",
					"  return {'loss': loss, 'status': STATUS_OK}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "3-QPJiYbraWf"
				},
				"source": [
					"# Define parameter space for HPO\n",
					"space = {\n",
					"  'regParam': hp.quniform('regParam',  0, 1, q=0.01),\n",
					"  'tol': hp.quniform('tol', 0, 1e-3, q=5e-8),\n",
					"  'maxIter': scope.int(hp.quniform('maxIter', 100, 1000, q=100))\n",
					"}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "8saroUDhraWf",
					"outputId": "bd312b4d-7c49-4d13-aafd-d85675c2cabb",
					"scrolled": true,
					"tags": []
				},
				"source": [
					"# Run HPO\n",
					"algo=tpe.suggest\n",
					"\n",
					"with mlflow.start_run():\n",
					"    \n",
					"  best_params = fmin( \n",
					"      fn=train_with_hyperopt,\n",
					"      space=space,\n",
					"      algo=algo,\n",
					"      max_evals=100\n",
					"  )"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "msxgLUKuraWg",
					"outputId": "ffd40f83-a30f-4ce5-b110-6d9b29eaa255"
				},
				"source": [
					"# Print best params\n",
					"best_params"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "N3fEYWoKraWg"
				},
				"source": [
					"# Define vars to fit best params\n",
					"best_regParam = best_params['regParam']\n",
					"best_tol = best_params['tol']\n",
					"best_maxIter = int(best_params['maxIter'])"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "AuGch4vsraWh",
					"outputId": "79bb52e9-3f09-428b-dc49-879b9e002c8e"
				},
				"source": [
					"# Fit model with best params\n",
					"final_model, val_f1_score = train_model(best_regParam, best_tol, best_maxIter)\n",
					"print(f'The trained LinearSVC achieved an F1 score of {val_f1_score} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "OYDdZuM-raWh",
					"outputId": "2516e0b2-9b63-4b21-a74e-91584d7103b7"
				},
				"source": [
					"# Evaluate F1 score on initial and tuned model\n",
					"initial_model_test_metric = evaluator_f1.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_f1.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved F1 score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "BXrAWmC8raWi",
					"outputId": "7980e5b8-7b72-4077-afd6-0a224bc2ea0d"
				},
				"source": [
					"# Evaluate AUROC on initial and tuned model\n",
					"initial_model_test_metric = evaluator_auroc.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_auroc.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved AUROC score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "eRSzliYYraWj",
					"outputId": "ecd54380-a8e4-4de2-9c12-91f172a0b6d7"
				},
				"source": [
					"# Set up LinearSVC pipeline: {'maxIter': 700.0, 'regParam': 0.0, 'tol': 0.0001082}\n",
					"lsvc = LinearSVC(labelCol='label',\n",
					"                 featuresCol='scaledFeatures',\n",
					"                 regParam=best_regParam,\n",
					"                 tol=best_tol,\n",
					"                 maxIter=best_maxIter)\n",
					"\n",
					"pipeline_lsvc = Pipeline(stages=[stdScaler, lsvc])\n",
					"search_time_start = time.time()\n",
					"pipelineModel_lsvc_hyperopt = pipeline_lsvc.fit(trainDF)\n",
					"print('Time to fit best model:', time.time() - search_time_start)\n",
					"pipelineModel_lsvc_hyperopt.save('/content/drive/MyDrive/LoanStatus/Python/Models/ML/SparkML/Models/Hyperopt/pipelineModel_lsvc_hyperopt_smote_f1')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "S1R1s1MEzlw6",
					"outputId": "48043c64-05d9-4033-d19e-b604e8a97512"
				},
				"source": [
					"# Predict and find AUROC, test error and accuracy\n",
					"prediction_lsvc = pipelineModel_lsvc_hyperopt.transform(testDF) \n",
					"\n",
					"lsvc_auroc = evaluator_auroc.evaluate(prediction_lsvc)\n",
					"print('Hyperopt: LinearSVC')\n",
					"print('Area under ROC curve: %g' % (lsvc_auroc))\n",
					"print('Test Error: %g' % (1.0 - lsvc_auroc))\n",
					"print('Accuracy:', evaluator_acc.evaluate(prediction_lsvc)) "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "4V5HpMbj5Fxy"
				},
				"source": [
					"## Decision Tree"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "_7MIvfuX5Ibz"
				},
				"source": [
					"### AUROC Score"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "WcZ6vU4PcxzZ"
				},
				"source": [
					"##### 50 Trials "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "6Nv_-Qn4W43x"
				},
				"source": [
					"def train_model(maxDepth, maxBins):\n",
					"\n",
					"  \"\"\"\n",
					"   - Input: Hyperparameters for tuning\n",
					"   - Return: AUROC score on the validation set\n",
					"  \"\"\"\n",
					" \n",
					"  # Use MLflow to track with 'nested=True' logged as a child run \n",
					"  with mlflow.start_run(nested=True):\n",
					"\n",
					"    # Define model\n",
					"    dtc = DecisionTreeClassifier(labelCol='label', \n",
					"                                 featuresCol='unscaledFeatures',\n",
					"                                 maxDepth=maxDepth,\n",
					"                                 maxBins=maxBins,\n",
					"                                 seed=seed_value)\n",
					"\n",
					"    print('\\nTrial Parameters:')\n",
					"    print('maxDepth:', dtc.getMaxDepth())\n",
					"    print('maxBins:', dtc.getMaxBins())  \n",
					"    \n",
					"    # Create pipeline\n",
					"    pipeline_dt_hpo = Pipeline(stages=[dtc])\n",
					"\n",
					"    # Define an evaluation metric\n",
					"    evaluator_auroc = BinaryClassificationEvaluator(labelCol='label', \n",
					"                                                    metricName='areaUnderROC')\n",
					"\n",
					"    # Fit model\n",
					"    model = pipeline_dt_hpo.fit(trainDF)   \n",
					"    \n",
					"    # Evaluate the model on the validation dataset\n",
					"    predictions = model.transform(testDF)\n",
					"    validation_metric = evaluator_auroc.evaluate(predictions)\n",
					"\n",
					"    mlflow.log_metric('val_AUROC_score', validation_metric)\n",
					" \n",
					"  return model, validation_metric"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "C_dVdMLnW43x",
					"outputId": "1420a388-ba29-403d-83ab-786aaf023a66"
				},
				"source": [
					"# Run initial model \n",
					"search_time_start = time.time()\n",
					"initial_model, val_metric = train_model(maxDepth=5, maxBins=16)\n",
					"print('Time to fit model:', time.time() - search_time_start)\n",
					"print(f'The trained decision tree classifier achieved an AUROC score of {val_metric} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "G8PndIzaW43x"
				},
				"source": [
					"def train_with_hyperopt(params):\n",
					"\n",
					"  \"\"\"\n",
					"  Train method where hyperparameters are passed to hyperopt.fmin()\n",
					"  - Input: Hyperparameters (params) in dictionary\n",
					"  - Return: Dictionary with 'loss' and 'status' (success/failure of run)\n",
					"  \"\"\"\n",
					"\n",
					"  # Convert integer params to int type if searching over continuous values\n",
					"  maxDepth = int(params['maxDepth'])\n",
					"  maxBins = int(params['maxBins'])\n",
					"\n",
					"  # Train model\n",
					"  model, AUROC_score = train_model(maxDepth, maxBins)\n",
					"  \n",
					"  # Return a loss to monitor\n",
					"  loss = 1 - AUROC_score\n",
					"  print('Trial loss:', loss)\n",
					"    \n",
					"  return {'loss': loss, 'status': STATUS_OK}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "r7soP4UeW43y"
				},
				"source": [
					"# Define parameter space for HPO\n",
					"space = {\n",
					"  'maxDepth': scope.int(hp.quniform('maxDepth', 5, 30, q=1)),\n",
					"  'maxBins': scope.int(hp.quniform('maxBins', 16, 128, q=16))\n",
					"}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "5VRKbtFgW43y",
					"outputId": "3bbe4239-20a9-40c5-e371-d583c0b7e186",
					"scrolled": true,
					"tags": []
				},
				"source": [
					"# Run HPO\n",
					"algo=tpe.suggest\n",
					"\n",
					"with mlflow.start_run():\n",
					"    \n",
					"  best_params = fmin(\n",
					"    fn=train_with_hyperopt,\n",
					"    space=space,\n",
					"    algo=algo,\n",
					"    max_evals=50\n",
					"  )"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "P2DMT0BSW43y",
					"outputId": "5b3652d8-43e4-4f27-f13d-a7c15a0ee7c2"
				},
				"source": [
					"# Print best params\n",
					"best_params"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "uslsmO84W43y"
				},
				"source": [
					"# Define vars to fit best params\n",
					"best_maxDepth = int(best_params['maxDepth'])\n",
					"best_maxBins = int(best_params['maxBins'])"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "5004IIEfW43y",
					"outputId": "fc3b0ca5-3e1f-45e7-c869-c092279d15dd"
				},
				"source": [
					"# Fit model with best params\n",
					"final_model, val_AUROC_score = train_model(best_maxDepth, best_maxBins)\n",
					"print(f'The trained decision tree classifier achieved an AUROC score of {val_AUROC_score} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "mqoR74zMW43z",
					"outputId": "a600bafa-f81b-4674-c273-497292d771c0"
				},
				"source": [
					"# Evaluate AUROC on initial and tuned model\n",
					"initial_model_test_metric = evaluator_auroc.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_auroc.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved AUROC score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "Gc0ftCfrW43z",
					"outputId": "aff08b1f-b0bf-4eb5-e0fb-9b18ad28b8b1"
				},
				"source": [
					"# Evaluate F1 score on initial and tuned model\n",
					"initial_model_test_metric = evaluator_f1.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_f1.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved F1 score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "pnIHf59qZ8pc",
					"outputId": "02be65a9-f60a-4132-a08c-7e8e7556c2e3"
				},
				"source": [
					"# Set up DecisionTree pipeline: {'maxBins': 80.0, 'maxDepth': 26.0}\n",
					"dt = DecisionTreeClassifier(labelCol='label', \n",
					"                            featuresCol='unscaledFeatures', \n",
					"                            impurity='gini', \n",
					"                            maxDepth=best_maxDepth, \n",
					"                            maxBins=best_maxBins,\n",
					"                            seed=seed_value)\n",
					"\n",
					"search_time_start = time.time()\n",
					"pipeline_dt = Pipeline(stages=[dt])\n",
					"pipelineModel_dt_hyperopt = pipeline_dt.fit(trainDF)\n",
					"print('Time to fit best model:', time.time() - search_time_start)\n",
					"pipelineModel_dt_hyperopt.save('/content/drive/MyDrive/LoanStatus/Python/Models/ML/SparkML/Models/Hyperopt/pipelineModel_dt_hyperopt_smote_auroc')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "Vo3_Y2KOzlw-",
					"outputId": "1c04e3f5-d7d4-4b75-95e9-a17f0153c604"
				},
				"source": [
					"# Predict and find AUROC, test error and accuracy\n",
					"prediction_dt = pipelineModel_dt_hyperopt.transform(testDF) \n",
					"\n",
					"dt_auroc = evaluator_auroc.evaluate(prediction_dt)\n",
					"print('Hyperopt: Decision Tree')\n",
					"print('Area under ROC curve: %g' % (dt_auroc))\n",
					"print('Test Error: %g '% (1.0 - dt_auroc))\n",
					"print('Accuracy:', evaluator_acc.evaluate(prediction_dt)) "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "odLegMMy6tfo"
				},
				"source": [
					"### F1 Score"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "KC4SGVeacHT2"
				},
				"source": [
					"##### 50 Trials "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "ZXoVCtugW43m"
				},
				"source": [
					"def train_model(maxDepth, maxBins):\n",
					"\n",
					"  \"\"\"\n",
					"   - Input: Hyperparameters for tuning\n",
					"   - Return: F1 score on the validation set\n",
					"  \"\"\"\n",
					"\n",
					"  # Use MLflow to track with 'nested=True' logged as a child run \n",
					"  with mlflow.start_run(nested=True):\n",
					"\n",
					"    # Define model\n",
					"    dtc = DecisionTreeClassifier(labelCol='label', \n",
					"                                featuresCol='unscaledFeatures',\n",
					"                                maxDepth=maxDepth,\n",
					"                                maxBins=maxBins,\n",
					"                                seed=seed_value)\n",
					"\n",
					"    print('\\nTrial Parameters:')\n",
					"    print('maxDepth:', dtc.getMaxDepth())\n",
					"    print('maxBins:', dtc.getMaxBins())    \n",
					"    \n",
					"    # Create pipeline\n",
					"    pipeline_dt_hpo = Pipeline(stages=[dtc])\n",
					"\n",
					"    # Define an evaluation metric\n",
					"    evaluator_f1 = MulticlassClassificationEvaluator(labelCol='label', \n",
					"                                                     metricName='f1')\n",
					"\n",
					"    # Fit model\n",
					"    model = pipeline_dt_hpo.fit(trainDF)   \n",
					"    \n",
					"    # Evaluate the model on the validation dataset\n",
					"    predictions = model.transform(testDF)\n",
					"    validation_metric = evaluator_f1.evaluate(predictions)\n",
					"\n",
					"    mlflow.log_metric('val_f1_score', validation_metric)\n",
					" \n",
					"  return model, validation_metric"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "O7fWbbYQW43n",
					"outputId": "b5c1943d-3103-46f1-e3b0-397f7b653e92"
				},
				"source": [
					"# Run initial model \n",
					"search_time_start = time.time()\n",
					"initial_model, val_metric = train_model(maxDepth=5, maxBins=16)\n",
					"print('Time to fit model:', time.time() - search_time_start)\n",
					"print(f'The trained decision tree classifier achieved an F1 score of {val_metric} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "OYgCnzI6W43n"
				},
				"source": [
					"def train_with_hyperopt(params):\n",
					"\n",
					"  \"\"\"\n",
					"  Train method where hyperparameters are passed to hyperopt.fmin()\n",
					"  - Input: Hyperparameters (params) in dictionary\n",
					"  - Return: Dictionary with 'loss' and 'status' (success/failure of run)\n",
					"  \"\"\"\n",
					"\n",
					"  # Convert integer params to int type if searching over continuous values\n",
					"  maxDepth = int(params['maxDepth'])\n",
					"  maxBins = int(params['maxBins'])\n",
					"\n",
					"  # Train model\n",
					"  model, f1_score = train_model(maxDepth, maxBins)\n",
					"  \n",
					"  # Return a loss to monitor\n",
					"  loss = 1 - f1_score\n",
					"  print('Trial loss:', loss)\n",
					"    \n",
					"  return {'loss': loss, 'status': STATUS_OK}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "Jq-KV1QXW43o"
				},
				"source": [
					"# Define parameter space for HPO\n",
					"space = {\n",
					"  'maxDepth': scope.int(hp.quniform('maxDepth', 5, 30, q=1)),\n",
					"  'maxBins': scope.int(hp.quniform('maxBins', 16, 128, q=16))\n",
					"}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "i4p6boa_W43o",
					"outputId": "1d7fb0d4-f9fd-498e-c5f4-cce5bae82c30",
					"scrolled": true,
					"tags": []
				},
				"source": [
					"# Run HPO\n",
					"algo=tpe.suggest\n",
					"\n",
					"with mlflow.start_run():\n",
					"    \n",
					"  best_params = fmin(\n",
					"    fn=train_with_hyperopt,\n",
					"    space=space,\n",
					"    algo=algo,\n",
					"    max_evals=50\n",
					"  )"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "1YOqF97SW43p",
					"outputId": "9e6d5792-026a-42bb-9aea-13ffdd32b92a"
				},
				"source": [
					"# Print best params\n",
					"best_params"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "QHSjoKIEW43t"
				},
				"source": [
					"# Define vars to fit best params\n",
					"best_maxDepth = int(best_params['maxDepth'])\n",
					"best_maxBins = int(best_params['maxBins'])"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "NC5ffWccW43t",
					"outputId": "63479658-2dff-4df2-b66d-35ce5136d7a4"
				},
				"source": [
					"# Fit model with best params\n",
					"final_model, val_f1_score = train_model(best_maxDepth, best_maxBins)\n",
					"print(f'The trained decision tree classifier achieved an F1 score of {val_f1_score} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "q6pFucI8W43v",
					"outputId": "62f629d4-12f0-4563-9200-865541cf14d6"
				},
				"source": [
					"# Evaluate F1 score on initial and tuned model\n",
					"initial_model_test_metric = evaluator_f1.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_f1.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved F1 score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "yMXfqNFlW43v",
					"outputId": "63c3fa9f-e79a-4845-c3c9-c6b4f7a7ef2f"
				},
				"source": [
					"# Evaluate AUROC on initial and tuned model\n",
					"initial_model_test_metric = evaluator_auroc.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_auroc.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved AUROC score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "0squl9y1W43w",
					"outputId": "54606a91-1948-48a7-a35a-e173494499c9"
				},
				"source": [
					"# Set up DecisionTree pipeline: {'maxBins': 128.0, 'maxDepth': 17.0}\n",
					"dt = DecisionTreeClassifier(labelCol='label', \n",
					"                            featuresCol='unscaledFeatures', \n",
					"                            impurity='gini', \n",
					"                            maxDepth=best_maxDepth, \n",
					"                            maxBins=best_maxBins,\n",
					"                            seed=seed_value)\n",
					"\n",
					"search_time_start = time.time()\n",
					"pipeline_dt = Pipeline(stages=[dt])\n",
					"pipelineModel_dt_hyperopt = pipeline_dt.fit(trainDF)\n",
					"print('Time to fit best model:', time.time() - search_time_start)\n",
					"pipelineModel_dt_hyperopt.save('/content/drive/MyDrive/LoanStatus/Python/Models/ML/SparkML/Models/Hyperopt/pipelineModel_dt_hyperopt_smote_f1')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "Q7-0_VO3zlxB",
					"outputId": "57517fee-a34b-4344-f96f-553ca8422f7e"
				},
				"source": [
					"# Predict and find AUROC, test error and accuracy\n",
					"prediction_dt = pipelineModel_dt_hyperopt.transform(testDF) \n",
					"\n",
					"dt_auroc = evaluator_auroc.evaluate(prediction_dt)\n",
					"print('Hyperopt: Decision Tree')\n",
					"print('Area under ROC curve: %g' % (dt_auroc))\n",
					"print('Test Error: %g '%(1.0 - dt_auroc))\n",
					"print('Accuracy:', evaluator_acc.evaluate(prediction_dt)) "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "X14MjMc_5W7I"
				},
				"source": [
					"## Random Forest"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "j6nJbVLh6AMV"
				},
				"source": [
					"### AUROC Score"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "kPdHso4W-6C5"
				},
				"source": [
					"##### 30 Trials "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "Py9FU26-_Ahe"
				},
				"source": [
					"def train_model(maxDepth, maxBins, numTrees):\n",
					"\n",
					"  \"\"\"\n",
					"   - Input: Hyperparameters for tuning\n",
					"   - Return: AUROC score on the validation set\n",
					"  \"\"\"\n",
					" \n",
					"  # Use MLflow to track with 'nested=True' logged as a child run \n",
					"  with mlflow.start_run(nested=True):\n",
					"\n",
					"    # Define model\n",
					"    rf = RandomForestClassifier(labelCol='label', \n",
					"                                featuresCol='unscaledFeatures',\n",
					"                                maxDepth=maxDepth,\n",
					"                                maxBins=maxBins,\n",
					"                                numTrees=numTrees,\n",
					"                                seed=seed_value)\n",
					"\n",
					"    print('\\nTrial Parameters:')\n",
					"    print('maxDepth:', rf.getMaxDepth())\n",
					"    print('maxBins:', rf.getMaxBins())\t    \n",
					"    print('numTrees:', rf.getNumTrees())\n",
					"\n",
					"    # Create pipeline\n",
					"    pipeline_rf_hpo = Pipeline(stages=[rf])\n",
					"\n",
					"    # Define an evaluation metric\n",
					"    evaluator_auroc = BinaryClassificationEvaluator(labelCol='label', \n",
					"                                                    metricName='areaUnderROC')\n",
					"\n",
					"    # Fit model\n",
					"    model = pipeline_rf_hpo.fit(trainDF)   \n",
					"\n",
					"    # Evaluate the model on the validation dataset\n",
					"    predictions = model.transform(testDF)\n",
					"    validation_metric = evaluator_auroc.evaluate(predictions)\n",
					"\n",
					"    mlflow.log_metric('val_AUROC_score', validation_metric)\n",
					" \n",
					"  return model, validation_metric"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "ptuq__er_Ahh",
					"outputId": "aa343da8-afe1-423e-d1fc-603cdb615536"
				},
				"source": [
					"# Run initial model \n",
					"initial_model, val_metric = train_model(maxDepth=5, maxBins=32, numTrees=10) \n",
					"print(f'The trained random forest classifier achieved an AUROC score of {val_metric} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "NIugqV_7_Ahi"
				},
				"source": [
					"def train_with_hyperopt(params):\n",
					"\n",
					"  \"\"\"\n",
					"  Train method where hyperparameters are passed to hyperopt.fmin()\n",
					"  - Input: Hyperparameters (params) in dictionary\n",
					"  - Return: Dictionary with 'loss' and 'status' (success/failure of run)\n",
					"  \"\"\"\n",
					"\n",
					"  # Convert integer params to int type if searching over continuous values\n",
					"  maxDepth = int(params['maxDepth'])\n",
					"  maxBins = int(params['maxBins'])\n",
					"  numTrees = int(params['numTrees'])\n",
					"\n",
					"  # Train model\n",
					"  model, AUROC_score = train_model(maxDepth, maxBins, numTrees) \n",
					"\n",
					"  # Return a loss to monitor\n",
					"  loss = 1 - AUROC_score\n",
					"  print('Trial loss: ', loss)\n",
					"\n",
					"  return {'loss': loss, 'status': STATUS_OK}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "cNi3DW_Z_Ahk"
				},
				"source": [
					"# Define parameter space for HPO\n",
					"space = {\n",
					"  'maxDepth': scope.int(hp.quniform('maxDepth', 5, 20, q=1)),\n",
					"  'maxBins': scope.int(hp.quniform('maxBins', 4, 64, q=4)),\n",
					"  'numTrees': scope.int(hp.quniform('numTrees', 10, 30, q=1))\n",
					"}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "iw1lCRavaRDz",
					"outputId": "e0fc2b11-6471-41bc-8f50-b978cc944a04",
					"scrolled": true,
					"tags": []
				},
				"source": [
					"# Run HPO\n",
					"algo=tpe.suggest\n",
					"\n",
					"with mlflow.start_run():\n",
					"    \n",
					"  best_params = fmin( \n",
					"      fn=train_with_hyperopt,\n",
					"      space=space,\n",
					"      algo=algo,\n",
					"      max_evals=30\n",
					"  )"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "XSqY1tC-ZV00",
					"outputId": "32682879-8cde-455d-a94d-f07902969183"
				},
				"source": [
					"# Print best params\n",
					"best_params"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "K-piRpwuZV03"
				},
				"source": [
					"# Define vars to fit best params\n",
					"best_maxDepth = int(best_params['maxDepth'])\n",
					"best_maxBins = int(best_params['maxBins'])\n",
					"best_numTrees = int(best_params['numTrees'])"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "CyLoSSG6f3FL",
					"outputId": "84fd0bd7-bd5d-4531-ec63-9e1ccf159439"
				},
				"source": [
					"# Fit model with best params\n",
					"final_model, val_auroc_score = train_model(best_maxDepth, best_maxBins, best_numTrees)\n",
					"print(f'The trained random forest classifier achieved an AUROC score of {val_auroc_score} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "RmM7Fc_9ZV06",
					"outputId": "b4320c96-993a-4a50-cb3f-5dfb7f96baa3"
				},
				"source": [
					"# Evaluate AUROC on initial and tuned model\n",
					"initial_model_test_metric = evaluator_auroc.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_auroc.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved AUROC score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "tnvM4iWqZV07",
					"outputId": "10539fa0-ec46-445f-9f1a-d978fe3ced88"
				},
				"source": [
					"# Evaluate F1 on initial and tuned model\n",
					"initial_model_test_metric = evaluator_f1.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_f1.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved F1 score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.testDF')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "CoxhJAKpaoNB",
					"outputId": "3810ff76-3096-4b31-e0f9-e09636fb46dc"
				},
				"source": [
					"# Set up RF pipeline {'maxBins': 36.0, 'maxDepth': 20.0, 'numTrees': 30.0}\n",
					"rf = RandomForestClassifier(labelCol='label',  \n",
					"                            featuresCol='unscaledFeatures',  \n",
					"                            impurity='gini',  \n",
					"                            numTrees=best_numTrees, \n",
					"                            maxDepth=best_maxDepth, \n",
					"                            maxBins=best_maxBins,\n",
					"                            seed=seed_value)\n",
					"\n",
					"search_time_start = time.time()\n",
					"pipeline_rf = Pipeline(stages=[rf])\n",
					"pipelineModel_rf_hyperopt = pipeline_rf.fit(trainDF)\n",
					"print('Time to fit best model:', time.time() - search_time_start)\n",
					"pipelineModel_rf_hyperopt.save('/content/drive/MyDrive/LoanStatus/Python/Models/ML/SparkML/Models/Hyperopt/pipelineModel_rf_hyperopt_smote_auroc_30trials')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "LMgspsy_0sk6",
					"outputId": "b56846df-fbdd-4b7c-843e-309e247b01cf"
				},
				"source": [
					"# Predict and find AUROC, test error and accuracy\n",
					"prediction_rf = pipelineModel_rf_hyperopt.transform(testDF)\n",
					"\n",
					"rf_auroc = evaluator_auroc.evaluate(prediction_rf)\n",
					"print('Hyperopt: Random Forest')\n",
					"print('Area under ROC curve: %g' % (rf_auroc))\n",
					"print('Test Error: %g ' % (1.0 - rf_auroc))\n",
					"print('Accuracy:', evaluator_acc.evaluate(prediction_rf)) "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "MSDZ5Skr9hXP"
				},
				"source": [
					"#### 20 Trials - Increased Trees & Depth "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "tw6tGWyn9hXb"
				},
				"source": [
					"# Define parameter space for HPO\n",
					"space = {\n",
					"  'maxDepth': scope.int(hp.quniform('maxDepth', 10, 30, q=5)),\n",
					"  'maxBins': scope.int(hp.quniform('maxBins', 16, 32, q=4)),\n",
					"  'numTrees': scope.int(hp.quniform('numTrees', 20, 50, q=5))\n",
					"}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "Ezo234Gea6Vg",
					"outputId": "52de248f-8beb-4e9c-c173-4a50982d0a59",
					"scrolled": true,
					"tags": []
				},
				"source": [
					"# Run HPO\n",
					"algo=tpe.suggest\n",
					"\n",
					"with mlflow.start_run():\n",
					"    \n",
					"  best_params=fmin( \n",
					"      fn=train_with_hyperopt,\n",
					"      space=space,\n",
					"      algo=algo,\n",
					"      max_evals=20\n",
					"  )"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "xmWS9EVSO7We",
					"outputId": "5e754bc5-2cd4-42d9-ce02-43f891fedf12"
				},
				"source": [
					"# Print best params\n",
					"best_params"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "cKp4qqyf9hXh"
				},
				"source": [
					"# Define vars to fit best params\n",
					"best_maxDepth = int(best_params['maxDepth'])\n",
					"best_maxBins = int(best_params['maxBins'])\n",
					"best_numTrees = int(best_params['numTrees'])"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "A2ymHNGoa_WY",
					"outputId": "647c8ee9-3f8c-4e7b-eb66-ccd6ab625198"
				},
				"source": [
					"# Fit model with best params and evaluate AUROC tuned model\n",
					"final_model, val_AUROC_score = train_model(best_maxDepth, best_maxBins, best_numTrees)\n",
					"print(f'The trained Random Forest classifier achieved an AUROC score of {val_AUROC_score} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "F1e56TE-9hXl",
					"outputId": "de1d8984-5019-4d5f-aec9-3f2cd62e14a3"
				},
				"source": [
					"# Evaluate F1 score on initial and tuned model\n",
					"initial_model_test_metric = evaluator_f1.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_f1.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved F1 score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "HZS6-aQm9hXn",
					"outputId": "6dcc3dfd-da7e-45e7-c64e-a8734662d5d9"
				},
				"source": [
					"# Evaluate AUROC on initial and tuned model\n",
					"initial_model_test_metric = evaluator_auroc.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_auroc.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved AUROC score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "db8s1zFvbNDY",
					"outputId": "dd6a2c4b-de80-424e-ca00-2c581aaeb762"
				},
				"source": [
					"# Set up RF pipeline: {'maxBins': 28.0, 'maxDepth': 30.0, 'numTrees': 50.0}\n",
					"rf = RandomForestClassifier(labelCol='label',  \n",
					"                            featuresCol='unscaledFeatures',  \n",
					"                            impurity='gini',  \n",
					"                            numTrees=best_numTrees, \n",
					"                            maxDepth=best_maxDepth, \n",
					"                            maxBins=best_maxBins,\n",
					"                            seed=seed_value)\n",
					"\n",
					"search_time_start = time.time()\n",
					"pipeline_rf = Pipeline(stages=[rf])\n",
					"pipelineModel_rf_hyperopt = pipeline_rf.fit(trainDF)\n",
					"print('Time to fit best model:', time.time() - search_time_start)\n",
					"pipelineModel_rf_hyperopt.save('/content/drive/MyDrive/LoanStatus/Python/Models/ML/SparkML/Models/Hyperopt/pipelineModel_rf_hyperopt_smote_auroc_moreParams')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "Dqsk8PPu0Xqv",
					"outputId": "08fc9f98-1f42-47bd-bceb-be8dcd3b0dff"
				},
				"source": [
					"# Predict and find AUROC, test error and accuracy\n",
					"prediction_rf = pipelineModel_rf_hyperopt.transform(testDF)\n",
					"\n",
					"rf_auroc = evaluator_auroc.evaluate(prediction_rf)\n",
					"print('Hyperopt: Random Forest')\n",
					"print('Area under ROC curve: %g' % (rf_auroc))\n",
					"print('Test Error: %g ' % (1.0 - rf_auroc))\n",
					"print('Accuracy:', evaluator_acc.evaluate(prediction_rf)) "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "citpQtqx5d_N"
				},
				"source": [
					"### F1 Score"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "s7ZDtDvM0ZjL"
				},
				"source": [
					"#### 30 Trials "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "3UlwzRby0ZjN"
				},
				"source": [
					"def train_model(maxDepth, maxBins, numTrees):\n",
					"\n",
					"  \"\"\"\n",
					"   - Input: Hyperparameters for tuning\n",
					"   - Return: F1 score on the validation set\n",
					"  \"\"\"\n",
					" \n",
					"  # Use MLflow to track with 'nested=True' logged as a child run \n",
					"  with mlflow.start_run(nested=True):\n",
					"\n",
					"    # Define model\n",
					"    rf = RandomForestClassifier(labelCol='label', \n",
					"                                featuresCol='unscaledFeatures',\n",
					"                                maxDepth=maxDepth,\n",
					"                                maxBins=maxBins,\n",
					"                                numTrees=numTrees,\n",
					"                                seed=seed_value)\n",
					"\n",
					"    print('\\nTrial Parameters:')\n",
					"    print('maxDepth:', rf.getMaxDepth())\n",
					"    print('maxBins:', rf.getMaxBins())\t    \n",
					"    print('numTrees:', rf.getNumTrees())\n",
					"\n",
					"    # Create pipeline\n",
					"    pipeline_rf_hpo = Pipeline(stages=[rf])\n",
					"\n",
					"    # Define an evaluation metric\n",
					"    evaluator_f1 = MulticlassClassificationEvaluator(labelCol='label', \n",
					"                                                     metricName='f1')\n",
					"\n",
					"    # Fit model\n",
					"    model = pipeline_rf_hpo.fit(trainDF)   \n",
					"\n",
					"    # Evaluate the model on the validation dataset\n",
					"    predictions = model.transform(testDF)\n",
					"    validation_metric = evaluator_f1.evaluate(predictions)\n",
					"\n",
					"    mlflow.log_metric('val_f1_score', validation_metric)\n",
					" \n",
					"  return model, validation_metric"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "ToFCCCCJ0ZjP",
					"outputId": "bcd748a5-7327-4360-ebb6-2396af71fd72"
				},
				"source": [
					"# Run initial model \n",
					"search_time_start = time.time()\n",
					"initial_model, val_metric = train_model(maxDepth=5, maxBins=32, numTrees=10) \n",
					"print('Time to fit initial model:', time.time() - search_time_start)\n",
					"print(f'The trained Random Forest classifier achieved an F1 score of {val_metric} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "IFiXrnLi0ZjQ"
				},
				"source": [
					"def train_with_hyperopt(params):\n",
					"\n",
					"  \"\"\"\n",
					"  Train method where hyperparameters are passed to hyperopt.fmin()\n",
					"  - Input: Hyperparameters (params) in dictionary\n",
					"  - Return: Dictionary with 'loss' and 'status' (success/failure of run)\n",
					"  \"\"\"\n",
					"\n",
					"  # Convert integer params to int type if searching over continuous values\n",
					"  maxDepth = int(params['maxDepth'])\n",
					"  maxBins = int(params['maxBins'])\n",
					"  numTrees = int(params['numTrees'])\n",
					"\n",
					"  # Train model\n",
					"  model, f1_score = train_model(maxDepth, maxBins, numTrees)\n",
					"\n",
					"  # Return a loss to monitor\n",
					"  loss = 1 - f1_score\n",
					"  print('Trial loss:', loss)\n",
					"\n",
					"  return {'loss': loss, 'status': STATUS_OK}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "Q-qZvJaS0ZjS"
				},
				"source": [
					"# Define parameter space for HPO\n",
					"space = {\n",
					"  'maxDepth': scope.int(hp.quniform('maxDepth', 5, 20, q=1)),\n",
					"  'maxBins': scope.int(hp.quniform('maxBins', 4, 64, q=4)),\n",
					"  'numTrees': scope.int(hp.quniform('numTrees', 10, 30, q=1))\n",
					"}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "a4t2maA0bf5Y",
					"outputId": "2deb5bcf-85db-417d-a53e-9b6ef5867c1d",
					"scrolled": true,
					"tags": []
				},
				"source": [
					"# Run HPO\n",
					"algo=tpe.suggest\n",
					"\n",
					"with mlflow.start_run():\n",
					"    \n",
					"  best_params=fmin( \n",
					"      fn=train_with_hyperopt,\n",
					"      space=space,\n",
					"      algo=algo,\n",
					"      max_evals=30\n",
					"  )"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "ZOA290djFq7w",
					"outputId": "99ea282e-353f-4017-a192-73fcf4f5bdee"
				},
				"source": [
					"# Print best params\n",
					"best_params"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "X4xikhb4biho",
					"outputId": "3fd6c856-b14d-4945-9279-530e40331864"
				},
				"source": [
					"# Fit model with best params\n",
					"final_model, val_f1_score = train_model(best_maxDepth, best_maxBins, best_numTrees)\n",
					"print(f'The trained Random Forest classifier achieved an F1 score of {val_f1_score} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "hi9nILex0ZjZ",
					"outputId": "629841d4-6f49-4f4e-9758-43c4fad9ad33"
				},
				"source": [
					"# Evaluate F1 score on initial and tuned model\n",
					"initial_model_test_metric = evaluator_f1.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_f1.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved F1 score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "SE-exQFl0Zja",
					"outputId": "9faf439d-c038-4a2f-9883-304342126916"
				},
				"source": [
					"# Evaluate AUROC on initial and tuned model\n",
					"initial_model_test_metric = evaluator_auroc.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_auroc.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved AUROC score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "YWxAmEBlbvOq",
					"outputId": "b4a54733-f358-4c26-8c36-edb522ef97ba"
				},
				"source": [
					"# Set up RF pipeline: {'maxBins': 36.0, 'maxDepth': 20.0, 'numTrees': 17.0}\n",
					"rf = RandomForestClassifier(labelCol='label',  \n",
					"                            featuresCol='unscaledFeatures',  \n",
					"                            impurity='gini',  \n",
					"                            maxDepth=best_maxDepth, \n",
					"                            maxBins=best_maxBins,\n",
					"                            numTrees=best_numTrees,\n",
					"                            seed=seed_value)\n",
					"\n",
					"search_time_start = time.time()\n",
					"pipeline_rf = Pipeline(stages=[rf])\n",
					"pipelineModel_rf_hyperopt = pipeline_rf.fit(trainDF)\n",
					"print('Time to fit best model:', time.time() - search_time_start)\n",
					"pipelineModel_rf_hyperopt.save('/content/drive/MyDrive/LoanStatus/Python/Models/ML/SparkML/Models/Hyperopt/pipelineModel_rf_hyperopt_smote_f1_29trials')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "h3EHtO612vaX",
					"outputId": "107f55c5-ea89-45a1-da1a-a27ea15ade1b"
				},
				"source": [
					"# Predict and find AUROC, test error and accuracy\n",
					"prediction_rf = pipelineModel_rf_hyperopt.transform(testDF)\n",
					"\n",
					"rf_auroc = evaluator_auroc.evaluate(prediction_rf)\n",
					"print('Hyperopt: Random Forest')\n",
					"print('Area under ROC curve: %g' % (rf_auroc))\n",
					"print('Test Error: %g ' % (1.0 - rf_auroc))\n",
					"print('Accuracy:', evaluator_acc.evaluate(prediction_rf)) "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "vGnUk52F54BK"
				},
				"source": [
					"#### 20 Trials - Increased Trees"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "wHV_yPZr1tmN"
				},
				"source": [
					"# Define parameter space for HPO\n",
					"space = {\n",
					"  'maxDepth': scope.int(hp.quniform('maxDepth', 10, 30, q=5)),\n",
					"  'maxBins': scope.int(hp.quniform('maxBins', 16, 32, q=4)),\n",
					"  'numTrees': scope.int(hp.quniform('numTrees', 20, 50, q=5))\n",
					"}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "jLHKV6XCb-FV",
					"outputId": "04e4a3fa-a4c1-4b21-cc14-395fc882e4cf",
					"scrolled": true,
					"tags": []
				},
				"source": [
					"# Run HPO\n",
					"algo=tpe.suggest\n",
					"\n",
					"with mlflow.start_run():\n",
					"    \n",
					"  best_params=fmin( \n",
					"      fn=train_with_hyperopt,\n",
					"      space=space,\n",
					"      algo=algo,\n",
					"      max_evals=20\n",
					"  )"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "Med4D4OCF6Cz",
					"outputId": "4cf53c1a-6622-4ce1-e566-45a685412530"
				},
				"source": [
					"# Print best params\n",
					"best_params"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "PpC-GqKj1tmP"
				},
				"source": [
					"# Define vars to fit best params\n",
					"best_maxDepth = int(best_params['maxDepth'])\n",
					"best_maxBins = int(best_params['maxBins'])\n",
					"best_numTrees = int(best_params['numTrees'])"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "0deVUhUbhK-i",
					"outputId": "a0f5c9bf-0122-4ee7-9a62-b033781ddc1b"
				},
				"source": [
					"# Fit model with best params\n",
					"final_model, val_f1_score = train_model(best_maxDepth, best_maxBins, best_numTrees)\n",
					"print(f'The trained Random Forest classifier achieved an F1 score of {val_f1_score} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "gTfmr7Hy3Rg9",
					"outputId": "aaacae65-54cd-4487-edce-7adc7b0dd8ab"
				},
				"source": [
					"# Evaluate F1 on initial and tuned model\n",
					"initial_model_test_metric = evaluator_f1.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_f1.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved F1 score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.testDF')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "uUqNMVMz1tmR",
					"outputId": "386c07b9-a360-4fc1-d5d6-c94ece7a3e36"
				},
				"source": [
					"# Evaluate AUROC on initial and tuned model\n",
					"initial_model_test_metric = evaluator_auroc.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_auroc.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved AUROC score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "jzR1-4yqg2y4",
					"outputId": "6b48ec24-245e-498b-90f5-1a1028fa90e0"
				},
				"source": [
					"# Set up RF pipeline: {'maxBins': 28.0, 'maxDepth': 25.0, 'numTrees': 30.0}\n",
					"rf = RandomForestClassifier(labelCol='label',  \n",
					"                            featuresCol='unscaledFeatures',  \n",
					"                            impurity='gini',  \n",
					"                            numTrees=best_numTrees, \n",
					"                            maxDepth=best_maxDepth, \n",
					"                            maxBins=best_maxBins,\n",
					"                            seed=seed_value)\n",
					"\n",
					"search_time_start = time.time()\n",
					"pipeline_rf = Pipeline(stages=[rf])\n",
					"pipelineModel_rf_hyperopt = pipeline_rf.fit(trainDF)\n",
					"print('Time to fit best model:', time.time() - search_time_start)\n",
					"pipelineModel_rf_hyperopt.save('/content/drive/MyDrive/LoanStatus/Python/Models/ML/SparkML/Models/Hyperopt/pipelineModel_rf_hyperopt_smote_f1_moreParams')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "yc_KS-QR31aT",
					"outputId": "837c3e62-9ab3-4906-c0f5-dbc3d65896be"
				},
				"source": [
					"# Predict and find AUROC, test error and accuracy\n",
					"prediction_rf = pipelineModel_rf_hyperopt.transform(testDF)\n",
					"\n",
					"rf_auroc = evaluator_auroc.evaluate(prediction_rf)\n",
					"print('Hyperopt: Random Forest')\n",
					"print('Area under ROC curve: %g' % (rf_auroc))\n",
					"print('Test Error: %g ' % (1.0 - rf_auroc))\n",
					"print('Accuracy:', evaluator_acc.evaluate(prediction_rf)) "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "9QEAuXzA3ZSk"
				},
				"source": [
					"## Gradient Boosted Trees"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "Ez0fj5tw3fPK"
				},
				"source": [
					"### AUROC Score"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "G3_mmVna8egD"
				},
				"source": [
					"#### 30 Trials"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "TQmZFw95W43h"
				},
				"source": [
					"def train_model(maxDepth, maxBins, maxIter):\n",
					"\n",
					"  \"\"\"\n",
					"   - Input: Hyperparameters for tuning\n",
					"   - Return: AUROC score on the validation set\n",
					"  \"\"\"\n",
					" \n",
					"  # Use MLflow to track with 'nested=True' logged as a child run \n",
					"  with mlflow.start_run(nested=True):\n",
					"\n",
					"    # Define model\n",
					"    gbt = GBTClassifier(labelCol='label', \n",
					"                        featuresCol='unscaledFeatures',\n",
					"                        maxDepth=maxDepth,\n",
					"                        maxBins=maxBins,\n",
					"                        maxIter=maxIter,\n",
					"                        seed=seed_value)\n",
					"\n",
					"    print('\\nTrial Parameters:')\n",
					"    print('maxDepth:', gbt.getMaxDepth())\n",
					"    print('maxBins:', gbt.getMaxBins())\n",
					"    print('maxIter:', gbt.getMaxIter())\n",
					"    \n",
					"    # Create pipeline\n",
					"    pipeline_gbt_hpo = Pipeline(stages=[gbt])\n",
					"\n",
					"    # Define an evaluation metric\n",
					"    evaluator_auroc = BinaryClassificationEvaluator(labelCol='label', \n",
					"                                                    metricName='areaUnderROC')\n",
					"\n",
					"    # Fit model\n",
					"    model = pipeline_gbt_hpo.fit(trainDF)   \n",
					"\n",
					"    # Evaluate the model on the validation dataset\n",
					"    predictions = model.transform(testDF)\n",
					"    validation_metric = evaluator_auroc.evaluate(predictions)\n",
					"\n",
					"    mlflow.log_metric('val_AUROC_score', validation_metric)\n",
					" \n",
					"  return model, validation_metric"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "XljmRPnva3ZV",
					"outputId": "c602fd0a-f999-4b31-f32e-49543339afc4"
				},
				"source": [
					"# Run initial model \n",
					"initial_model, val_metric = train_model(maxDepth=5, maxBins=32, maxIter=10)\n",
					"print(f'The trained gradient boosted tree classifier achieved an AUROC score of {val_metric} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "qpw93ELvW43i"
				},
				"source": [
					"def train_with_hyperopt(params):\n",
					"\n",
					"  \"\"\"\n",
					"  Train method where hyperparameters are passed to hyperopt.fmin()\n",
					"  - Input: Hyperparameters (params) in dictionary\n",
					"  - Return: Dictionary with 'loss' and 'status' (success/failure of run)\n",
					"  \"\"\"\n",
					"\n",
					"  # Convert integer params to int type if searching over continuous values\n",
					"  maxDepth = int(params['maxDepth'])\n",
					"  maxBins = int(params['maxBins'])\n",
					"  maxIter = int(params['maxIter'])\n",
					"\n",
					"  # Train model\n",
					"  model, AUROC_score = train_model(maxDepth, maxBins, maxIter)\n",
					"\n",
					"  # Return a loss to monitor\n",
					"  loss = 1 - AUROC_score\n",
					"  print('Trial loss:', loss)\n",
					"\n",
					"  return {'loss': loss, 'status': STATUS_OK}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "oSrk3InOW43j"
				},
				"source": [
					"# Define parameter space for HPO\n",
					"space = {\n",
					"  'maxDepth': scope.int(hp.quniform('maxDepth', 5, 20, q=1)),\n",
					"  'maxBins': scope.int(hp.quniform('maxBins', 4, 64, q=4)),\n",
					"  'maxIter': scope.int(hp.quniform('maxIter', 5, 20, q=1))\n",
					"}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "yMyYJX6bW43j",
					"outputId": "1a6e364a-df34-4006-92c1-b0a126d20b0a",
					"scrolled": true,
					"tags": []
				},
				"source": [
					"# Run HPO\n",
					"algo=tpe.suggest\n",
					"\n",
					"with mlflow.start_run():\n",
					"    \n",
					"  best_params = fmin( \n",
					"      fn=train_with_hyperopt,\n",
					"      space=space,\n",
					"      algo=algo,\n",
					"      max_evals=30\n",
					"  )"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "hhsvleAy4omm",
					"outputId": "bc6d042a-47e7-4454-b144-6a28fce701c9"
				},
				"source": [
					"# Print best params\n",
					"best_params"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "SOtwxI8fW43k"
				},
				"source": [
					"# Define vars to fit best params\n",
					"best_maxDepth = int(best_params['maxDepth'])\n",
					"best_maxBins = int(best_params['maxBins'])\n",
					"best_maxIter = int(best_params['maxIter'])"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "ZdvAN9k8W43k",
					"outputId": "af950605-6810-43a5-c188-929029c33e1f"
				},
				"source": [
					"# Fit model with best params\n",
					"final_model, val_AUROC_score = train_model(best_maxDepth, best_maxBins, \n",
					"                                           best_maxIter)\n",
					"print(f'The trained gradient booster tree classifier achieved an AUROC score of {val_AUROC_score} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "BVRQIZQaW43k",
					"outputId": "bb83d0fe-0367-42e4-cc96-b85ae66e434a"
				},
				"source": [
					"# Evaluate AUROC on initial and tuned model\n",
					"initial_model_test_metric = evaluator_auroc.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_auroc.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved AUROC score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "XCs0JPsuW43k",
					"outputId": "76ec668a-c84a-41b9-dbbc-c41bff7b048b"
				},
				"source": [
					"# Evaluate F1 score on initial and tuned model\n",
					"initial_model_test_metric = evaluator_f1.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_f1.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved F1 score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "LfCyZTi_3jUn",
					"outputId": "8a04e801-e33c-45c4-ed4f-11d08e8bf146"
				},
				"source": [
					"# Set up GBT pipeline {'maxDepth': 14.0, 'maxBins': 40.0, 'maxIter': 20.0}\n",
					"gbt = GBTClassifier(labelCol='label', \n",
					"                    featuresCol='unscaledFeatures', \n",
					"                    maxDepth=best_maxDepth, \n",
					"                    maxBins=best_maxBins, \n",
					"                    maxIter=best_maxIter,\n",
					"                    seed=seed_value)\n",
					"\n",
					"search_time_start = time.time()\n",
					"pipeline_gbt = Pipeline(stages=[gbt])\n",
					"pipelineModel_gbt_hyperopt = pipeline_gbt.fit(trainDF)\n",
					"print('Time to fit best model:', time.time() - search_time_start)\n",
					"pipelineModel_gbt_hyperopt.save('/content/drive/MyDrive/LoanStatus/Python/Models/ML/SparkML/Models/Hyperopt/pipelineModel_gbt_hyperopt_smote_auroc')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "1mecKh67zO0K",
					"outputId": "3eb92f0b-277b-461c-d1a9-84d4f4591625"
				},
				"source": [
					"# Predict and find AUROC, test error and accuracy\n",
					"prediction_gbt = pipelineModel_gbt_hyperopt.transform(testDF) \n",
					"\n",
					"gbt_auroc = evaluator_auroc.evaluate(prediction_gbt)\n",
					"print('Hyperopt: Gradient Boosted Trees')\n",
					"print('Area under ROC curve: %g' % (gbt_auroc))\n",
					"print('Test Error: %g ' % (1.0 - gbt_auroc))\n",
					"print('Accuracy:', evaluator_acc.evaluate(prediction_gbt)) "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "MQrM_Iu66Pnq"
				},
				"source": [
					"### F1 Score"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"id": "xeIp52OZWwxN"
				},
				"source": [
					"##### 30 Trials"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "3SWcmEGJUFXp"
				},
				"source": [
					"def train_model(maxDepth, maxBins, maxIter):\n",
					"\n",
					"  \"\"\"\n",
					"   - Input: Hyperparameters for tuning\n",
					"   - Return: F1 score on the validation set\n",
					"  \"\"\"\n",
					"\n",
					"  # Use MLflow to track with 'nested=True' logged as a child run \n",
					"  with mlflow.start_run(nested=True):\n",
					"\n",
					"    # Define model\n",
					"    gbt = GBTClassifier(labelCol='label', \n",
					"                        featuresCol='unscaledFeatures',\n",
					"                        maxDepth=maxDepth,\n",
					"                        maxBins=maxBins,\n",
					"                        maxIter=maxIter,\n",
					"                        seed=seed_value)\n",
					"\n",
					"    print('\\nTrial Parameters:')\n",
					"    print('maxDepth:', gbt.getMaxDepth())\n",
					"    print('maxBins:', gbt.getMaxBins())\n",
					"    print('maxIter:', gbt.getMaxIter())\n",
					"    \n",
					"    # Create pipeline\n",
					"    pipeline_gbt_hpo = Pipeline(stages=[gbt])\n",
					"\n",
					"    # Define an evaluation metric\n",
					"    evaluator_f1 = MulticlassClassificationEvaluator(labelCol='label', \n",
					"                                                     metricName='f1')\n",
					"\n",
					"    # Fit model\n",
					"    model = pipeline_gbt_hpo.fit(trainDF)   \n",
					"\n",
					"    # Evaluate the model on the validation dataset\n",
					"    predictions = model.transform(testDF)\n",
					"    validation_metric = evaluator_f1.evaluate(predictions)\n",
					"\n",
					"    mlflow.log_metric('val_f1_score', validation_metric)\n",
					" \n",
					"  return model, validation_metric"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "J8ZY6UptUFXq",
					"outputId": "486e992c-2037-4149-8638-901bf0f516bc"
				},
				"source": [
					"# Run initial model\n",
					"search_time_start = time.time()\n",
					"initial_model, val_metric = train_model(maxDepth=5, maxBins=32, maxIter=10)\n",
					"print('Time to fit initial model:', time.time() - search_time_start)\n",
					"print(f'The trained gradient boosted tree classifier achieved an F1 score of {val_metric} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "VK668CAFUFXq"
				},
				"source": [
					"def train_with_hyperopt(params):\n",
					"\n",
					"  \"\"\"\n",
					"  Train method where hyperparameters are passed to hyperopt.fmin()\n",
					"  - Input: Hyperparameters (params) in dictionary\n",
					"  - Return: Dictionary with 'loss' and 'status' (success/failure of run)\n",
					"  \"\"\"\n",
					"\n",
					"  # Convert integer params to int type if searching over continuous values\n",
					"  maxDepth = int(params['maxDepth'])\n",
					"  maxBins = int(params['maxBins'])\n",
					"  maxIter = int(params['maxIter'])\n",
					"\n",
					"  # Train model\n",
					"  model, f1_score = train_model(maxDepth, maxBins, maxIter)\n",
					"\n",
					"  # Return a loss to monitor\n",
					"  loss = 1 - f1_score\n",
					"  print('Trial loss:', loss)\n",
					"\n",
					"  return {'loss': loss, 'status': STATUS_OK}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "DA8LlulZUFXv"
				},
				"source": [
					"# Define parameter space for HPO\n",
					"space = {\n",
					"  'maxDepth': scope.int(hp.quniform('maxDepth', 5, 20, q=1)),\n",
					"  'maxBins': scope.int(hp.quniform('maxBins', 4, 64, q=4)),\n",
					"  'maxIter': scope.int(hp.quniform('maxIter', 5, 20, q=1))\n",
					"}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "7FXkIjB9UFXv",
					"outputId": "ec182dcb-8e01-4dfe-d2ff-71c5610c2830",
					"scrolled": true,
					"tags": []
				},
				"source": [
					"# Run HPO\n",
					"algo=tpe.suggest\n",
					"\n",
					"with mlflow.start_run():\n",
					"    \n",
					"  best_params = fmin( \n",
					"      fn=train_with_hyperopt,\n",
					"      space=space,\n",
					"      algo=algo,\n",
					"      max_evals=30\n",
					"  )"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "1hIi7vJ7UFXw",
					"outputId": "fec92794-f590-46f0-f7ab-67de3d3238fa"
				},
				"source": [
					"# Print best params\n",
					"best_params"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "pAYb9qHfUFXy"
				},
				"source": [
					"# Define vars to fit best params\n",
					"best_maxDepth = int(best_params['maxDepth'])\n",
					"best_maxBins = int(best_params['maxBins'])\n",
					"best_maxIter = int(best_params['maxIter'])"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "fHlNXt8-UFXy",
					"outputId": "fa0b911b-f15f-48df-e7df-6a0504bdebd9"
				},
				"source": [
					"# Fit model with best params\n",
					"final_model, val_f1_score = train_model(best_maxDepth, best_maxBins, best_maxIter)\n",
					"print(f'The trained gradient booster tree classifier achieved an F1 score of {val_f1_score} on the validation data')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "v_NxawvDUFX4",
					"outputId": "380afc1c-b0a4-412c-98de-2bb31e505b73"
				},
				"source": [
					"# Evaluate F1 score on initial and tuned model\n",
					"initial_model_test_metric = evaluator_f1.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_f1.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved F1 score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"id": "S4SCSHvYUFX1",
					"outputId": "577c2b02-0d4d-493e-f7de-fca47a13dd52"
				},
				"source": [
					"# Evaluate AUROC on initial and tuned model\n",
					"initial_model_test_metric = evaluator_auroc.evaluate(initial_model.transform(testDF))\n",
					"final_model_test_metric = evaluator_auroc.evaluate(final_model.transform(testDF))\n",
					"print(f'On the test data, the initial (untuned) model achieved AUROC score {initial_model_test_metric}, and the final (tuned) model achieved {final_model_test_metric}.')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "fZEAMaQX38yR",
					"outputId": "1e5d7388-caf0-4ebe-e45d-c021e9f511bb"
				},
				"source": [
					"# Set up GBT pipeline {'maxBins': 52.0, 'maxDepth': 13.0, 'maxIter': 17.0}\n",
					"gbt = GBTClassifier(labelCol='label', \n",
					"                    featuresCol='unscaledFeatures', \n",
					"                    maxDepth=best_maxDepth, \n",
					"                    maxBins=best_maxBins, \n",
					"                    maxIter=best_maxIter,\n",
					"                    seed=seed_value)\n",
					"\n",
					"search_time_start = time.time()\n",
					"pipeline_gbt = Pipeline(stages=[gbt])\n",
					"pipelineModel_gbt_hyperopt = pipeline_gbt.fit(trainDF)\n",
					"print('Time to fit best model:', time.time() - search_time_start)\n",
					"pipelineModel_gbt_hyperopt.save('/content/drive/MyDrive/LoanStatus/Python/Models/ML/SparkML/Models/Hyperopt/pipelineModel_gbt_hyperopt_smote_f1')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"colab": {
						"base_uri": "https://localhost:8080/"
					},
					"id": "4F_g41J0kxAW",
					"outputId": "cf13269a-5daf-48cf-a4d8-9444e71d85d9"
				},
				"source": [
					"# Predict and find AUROC, test error and accuracy\n",
					"prediction_gbt = pipelineModel_gbt_hyperopt.transform(testDF)\n",
					"\n",
					"gbt_auroc = evaluator_auroc.evaluate(prediction_gbt)\n",
					"print('Hyperopt: Gradient Boosted Trees')\n",
					"print('Area under ROC curve: %g' % (gbt_auroc))\n",
					"print('Test Error: %g ' % (1.0 - gbt_auroc))\n",
					"print('Accuracy:', evaluator_acc.evaluate(prediction_gbt)) "
				]
			}
		]
	}
}